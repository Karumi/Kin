# Generated from PBXProj.g4 by ANTLR 4.6
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"v\u0575\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
        buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
        buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
        buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
        buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
        buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
        buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
        buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
        buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA")
        buf.write(u"\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\t")
        buf.write(u"J\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S")
        buf.write(u"\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4")
        buf.write(u"\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\t")
        buf.write(u"d\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m")
        buf.write(u"\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4")
        buf.write(u"v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}\4~\t~")
        buf.write(u"\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4\u0082")
        buf.write(u"\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085\t\u0085")
        buf.write(u"\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088\4\u0089")
        buf.write(u"\t\u0089\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c\t\u008c")
        buf.write(u"\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f\t\u008f\4\u0090")
        buf.write(u"\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093\t\u0093")
        buf.write(u"\4\u0094\t\u0094\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\5\7\u0147\n\7\3\7\3")
        buf.write(u"\7\5\7\u014b\n\7\3\7\5\7\u014e\n\7\3\7\3\7\3\7\3\7\5")
        buf.write(u"\7\u0154\n\7\3\7\5\7\u0157\n\7\3\7\3\7\5\7\u015b\n\7")
        buf.write(u"\3\7\5\7\u015e\n\7\3\7\5\7\u0161\n\7\3\7\3\7\5\7\u0165")
        buf.write(u"\n\7\3\7\5\7\u0168\n\7\3\7\3\7\3\7\5\7\u016d\n\7\3\7")
        buf.write(u"\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\6\t\u0178\n\t\r\t\16")
        buf.write(u"\t\u0179\3\n\6\n\u017d\n\n\r\n\16\n\u017e\3\13\6\13\u0182")
        buf.write(u"\n\13\r\13\16\13\u0183\3\f\6\f\u0187\n\f\r\f\16\f\u0188")
        buf.write(u"\3\r\6\r\u018c\n\r\r\r\16\r\u018d\3\16\6\16\u0191\n\16")
        buf.write(u"\r\16\16\16\u0192\3\17\6\17\u0196\n\17\r\17\16\17\u0197")
        buf.write(u"\3\20\6\20\u019b\n\20\r\20\16\20\u019c\3\21\6\21\u01a0")
        buf.write(u"\n\21\r\21\16\21\u01a1\3\22\6\22\u01a5\n\22\r\22\16\22")
        buf.write(u"\u01a6\3\23\6\23\u01aa\n\23\r\23\16\23\u01ab\3\24\6\24")
        buf.write(u"\u01af\n\24\r\24\16\24\u01b0\3\25\6\25\u01b4\n\25\r\25")
        buf.write(u"\16\25\u01b5\3\26\6\26\u01b9\n\26\r\26\16\26\u01ba\3")
        buf.write(u"\27\6\27\u01be\n\27\r\27\16\27\u01bf\3\30\6\30\u01c3")
        buf.write(u"\n\30\r\30\16\30\u01c4\3\31\6\31\u01c8\n\31\r\31\16\31")
        buf.write(u"\u01c9\3\32\6\32\u01cd\n\32\r\32\16\32\u01ce\3\33\6\33")
        buf.write(u"\u01d2\n\33\r\33\16\33\u01d3\3\34\3\34\3\34\3\34\3\34")
        buf.write(u"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3")
        buf.write(u"\35\3\35\3\35\5\35\u01e8\n\35\3\35\3\35\3\35\3\36\3\36")
        buf.write(u"\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\5\37\u0201\n\37")
        buf.write(u"\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \5 \u020c\n \3 \5")
        buf.write(u" \u020f\n \3 \5 \u0212\n \3 \5 \u0215\n \3 \5 \u0218")
        buf.write(u"\n \3 \5 \u021b\n \3 \5 \u021e\n \3 \5 \u0221\n \3 \5")
        buf.write(u" \u0224\n \3 \5 \u0227\n \3 \3 \3 \3!\3!\3!\3!\3!\3!")
        buf.write(u"\3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u023c\n\"\3")
        buf.write(u"\"\5\"\u023f\n\"\3\"\5\"\u0242\n\"\3\"\3\"\5\"\u0246")
        buf.write(u"\n\"\3\"\5\"\u0249\n\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3#")
        buf.write(u"\3#\3#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u0262\n")
        buf.write(u"$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%")
        buf.write(u"\3%\5%\u0276\n%\3%\3%\5%\u027a\n%\3%\3%\3%\3%\3%\3&\3")
        buf.write(u"&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'")
        buf.write(u"\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\5(\u029d\n(\3(")
        buf.write(u"\3(\5(\u02a1\n(\3(\5(\u02a4\n(\3(\3(\3(\3(\3(\5(\u02ab")
        buf.write(u"\n(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3")
        buf.write(u"*\3*\5*\u02bf\n*\3*\5*\u02c2\n*\3*\3*\3*\3*\3+\3+\3+")
        buf.write(u"\3+\3+\3+\3+\5+\u02cf\n+\3+\3+\3+\3+\3,\3,\3,\3,\3,\5")
        buf.write(u",\u02da\n,\3,\3,\3,\3,\3,\3-\3-\3-\3-\3-\3-\3-\5-\u02e8")
        buf.write(u"\n-\3-\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3/\3")
        buf.write(u"/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3")
        buf.write(u"\61\3\61\3\62\3\62\3\62\3\62\3\62\3\63\3\63\3\63\3\63")
        buf.write(u"\3\63\3\64\3\64\3\64\3\64\3\64\3\65\3\65\3\65\3\65\3")
        buf.write(u"\65\3\66\3\66\3\66\3\66\3\66\3\67\3\67\3\67\3\67\3\67")
        buf.write(u"\38\38\38\38\38\39\39\39\39\39\3:\3:\3:\3:\3:\3;\3;\3")
        buf.write(u";\3;\3;\3<\3<\3<\3<\3<\3=\3=\3=\3=\3=\3>\3>\3>\3>\3>")
        buf.write(u"\3?\3?\3?\3?\3?\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3B\3B\3")
        buf.write(u"B\3B\3B\3C\3C\3C\3C\3C\3D\3D\3D\3D\3D\3E\3E\3E\3E\3E")
        buf.write(u"\3F\3F\3F\3F\3F\3G\3G\3G\3G\3G\3H\3H\3H\3H\3H\3I\3I\3")
        buf.write(u"I\3I\3I\3J\3J\3J\3J\3J\3K\3K\3K\3K\3K\3L\3L\3L\3L\3L")
        buf.write(u"\3M\3M\3M\3M\3M\3N\3N\3N\3N\3N\3O\3O\3O\3O\3O\3P\3P\3")
        buf.write(u"P\3P\3P\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3R\3R\3S\3S\3S\3S\3S")
        buf.write(u"\3T\3T\3T\3T\3T\3U\3U\3U\3U\3U\3V\3V\3V\7V\u03bf\nV\f")
        buf.write(u"V\16V\u03c2\13V\3V\3V\3W\3W\3W\3W\7W\u03ca\nW\fW\16W")
        buf.write(u"\u03cd\13W\3W\3W\3X\3X\3X\7X\u03d4\nX\fX\16X\u03d7\13")
        buf.write(u"X\3X\3X\3Y\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3[\3[\3[\3[\3[")
        buf.write(u"\3\\\3\\\3\\\3\\\3\\\3]\3]\3]\3]\3]\3^\3^\3^\3^\3^\3")
        buf.write(u"_\3_\3_\3_\3_\3`\3`\3`\3`\3`\3a\3a\3a\3a\3a\3b\3b\3b")
        buf.write(u"\3b\3b\3c\3c\3c\3c\5c\u0411\nc\3c\5c\u0414\nc\3c\5c\u0417")
        buf.write(u"\nc\3c\5c\u041a\nc\3c\3c\5c\u041e\nc\3c\5c\u0421\nc\3")
        buf.write(u"c\5c\u0424\nc\3c\3c\3c\3d\3d\3d\3d\3d\3e\3e\3e\3e\3e")
        buf.write(u"\3f\3f\3f\3f\3f\3g\3g\3g\3g\3g\3h\3h\3h\3h\3h\3i\3i\3")
        buf.write(u"i\3i\3i\3j\3j\3j\3j\7j\u044b\nj\fj\16j\u044e\13j\3j\3")
        buf.write(u"j\3j\3k\3k\3k\3k\5k\u0457\nk\3k\5k\u045a\nk\3k\5k\u045d")
        buf.write(u"\nk\3k\5k\u0460\nk\3k\5k\u0463\nk\3k\5k\u0466\nk\3k\5")
        buf.write(u"k\u0469\nk\3k\3k\3k\3l\3l\3l\3l\3l\3m\3m\3m\3m\3m\3n")
        buf.write(u"\3n\3n\3n\3n\3o\3o\3o\3o\3o\3p\3p\3p\3p\3p\3q\3q\3q\3")
        buf.write(u"q\3q\3r\3r\3r\3r\3r\3s\3s\3s\3s\3s\3t\3t\3t\3t\3t\3u")
        buf.write(u"\3u\3u\3u\3u\3v\3v\3v\3v\3v\3w\3w\3w\3w\3w\3w\3w\3w\3")
        buf.write(u"w\3w\3w\3w\5w\u04b1\nw\3x\3x\3x\3x\3x\3y\3y\3y\3y\3y")
        buf.write(u"\3z\3z\3z\3z\3z\3{\3{\3{\3{\3{\3|\3|\3|\3|\3|\3}\3}\3")
        buf.write(u"}\3}\3}\3~\3~\3~\3~\3~\3\177\3\177\3\177\3\177\3\177")
        buf.write(u"\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0081\3\u0081")
        buf.write(u"\3\u0081\3\u0081\3\u0081\3\u0082\3\u0082\3\u0082\3\u0082")
        buf.write(u"\3\u0082\3\u0083\3\u0083\3\u0083\3\u0083\3\u0083\3\u0084")
        buf.write(u"\3\u0084\3\u0084\3\u0084\3\u0084\3\u0085\3\u0085\3\u0085")
        buf.write(u"\3\u0085\3\u0085\3\u0086\3\u0086\3\u0086\3\u0086\7\u0086")
        buf.write(u"\u04fd\n\u0086\f\u0086\16\u0086\u0500\13\u0086\3\u0086")
        buf.write(u"\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write(u"\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0089\7\u0089")
        buf.write(u"\u0510\n\u0089\f\u0089\16\u0089\u0513\13\u0089\3\u008a")
        buf.write(u"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a\3\u008a")
        buf.write(u"\3\u008a\3\u008a\3\u008a\3\u008a\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\7\u008b\u0533\n\u008b\f\u008b\16\u008b\u0536")
        buf.write(u"\13\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u053b\n\u008b")
        buf.write(u"\3\u008c\3\u008c\3\u008c\3\u008c\3\u008c\3\u008d\3\u008d")
        buf.write(u"\3\u008d\3\u008d\3\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write(u"\3\u008e\3\u008f\3\u008f\3\u008f\3\u008f\7\u008f\u0550")
        buf.write(u"\n\u008f\f\u008f\16\u008f\u0553\13\u008f\3\u008f\3\u008f")
        buf.write(u"\3\u008f\3\u0090\3\u0090\3\u0090\3\u0090\7\u0090\u055c")
        buf.write(u"\n\u0090\f\u0090\16\u0090\u055f\13\u0090\3\u0090\3\u0090")
        buf.write(u"\3\u0090\3\u0091\3\u0091\3\u0091\3\u0091\3\u0091\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\3\u0093\3\u0093\3\u0093")
        buf.write(u"\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\2\2\u0095\2")
        buf.write(u"\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write(u"\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write(u"\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write(u"\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write(u"\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write(u"\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write(u"\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write(u"\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write(u"\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write(u"\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write(u"\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write(u"\u0126\2\4\3\2qr\3\2qs\u0536\2\u0128\3\2\2\2\4\u012a")
        buf.write(u"\3\2\2\2\6\u0132\3\2\2\2\b\u0137\3\2\2\2\n\u013d\3\2")
        buf.write(u"\2\2\f\u0142\3\2\2\2\16\u0171\3\2\2\2\20\u0177\3\2\2")
        buf.write(u"\2\22\u017c\3\2\2\2\24\u0181\3\2\2\2\26\u0186\3\2\2\2")
        buf.write(u"\30\u018b\3\2\2\2\32\u0190\3\2\2\2\34\u0195\3\2\2\2\36")
        buf.write(u"\u019a\3\2\2\2 \u019f\3\2\2\2\"\u01a4\3\2\2\2$\u01a9")
        buf.write(u"\3\2\2\2&\u01ae\3\2\2\2(\u01b3\3\2\2\2*\u01b8\3\2\2\2")
        buf.write(u",\u01bd\3\2\2\2.\u01c2\3\2\2\2\60\u01c7\3\2\2\2\62\u01cc")
        buf.write(u"\3\2\2\2\64\u01d1\3\2\2\2\66\u01d5\3\2\2\28\u01e1\3\2")
        buf.write(u"\2\2:\u01ec\3\2\2\2<\u01f7\3\2\2\2>\u0206\3\2\2\2@\u022b")
        buf.write(u"\3\2\2\2B\u0235\3\2\2\2D\u024d\3\2\2\2F\u0257\3\2\2\2")
        buf.write(u"H\u0269\3\2\2\2J\u0280\3\2\2\2L\u028b\3\2\2\2N\u0295")
        buf.write(u"\3\2\2\2P\u02af\3\2\2\2R\u02b9\3\2\2\2T\u02c7\3\2\2\2")
        buf.write(u"V\u02d4\3\2\2\2X\u02e0\3\2\2\2Z\u02ec\3\2\2\2\\\u02f8")
        buf.write(u"\3\2\2\2^\u02fd\3\2\2\2`\u0302\3\2\2\2b\u0307\3\2\2\2")
        buf.write(u"d\u030c\3\2\2\2f\u0311\3\2\2\2h\u0316\3\2\2\2j\u031b")
        buf.write(u"\3\2\2\2l\u0320\3\2\2\2n\u0325\3\2\2\2p\u032a\3\2\2\2")
        buf.write(u"r\u032f\3\2\2\2t\u0334\3\2\2\2v\u0339\3\2\2\2x\u033e")
        buf.write(u"\3\2\2\2z\u0343\3\2\2\2|\u0348\3\2\2\2~\u034d\3\2\2\2")
        buf.write(u"\u0080\u0352\3\2\2\2\u0082\u0357\3\2\2\2\u0084\u035c")
        buf.write(u"\3\2\2\2\u0086\u0361\3\2\2\2\u0088\u0366\3\2\2\2\u008a")
        buf.write(u"\u036b\3\2\2\2\u008c\u0370\3\2\2\2\u008e\u0375\3\2\2")
        buf.write(u"\2\u0090\u037a\3\2\2\2\u0092\u037f\3\2\2\2\u0094\u0384")
        buf.write(u"\3\2\2\2\u0096\u0389\3\2\2\2\u0098\u038e\3\2\2\2\u009a")
        buf.write(u"\u0393\3\2\2\2\u009c\u0398\3\2\2\2\u009e\u039d\3\2\2")
        buf.write(u"\2\u00a0\u03a2\3\2\2\2\u00a2\u03a7\3\2\2\2\u00a4\u03ac")
        buf.write(u"\3\2\2\2\u00a6\u03b1\3\2\2\2\u00a8\u03b6\3\2\2\2\u00aa")
        buf.write(u"\u03bb\3\2\2\2\u00ac\u03c5\3\2\2\2\u00ae\u03d0\3\2\2")
        buf.write(u"\2\u00b0\u03da\3\2\2\2\u00b2\u03df\3\2\2\2\u00b4\u03e4")
        buf.write(u"\3\2\2\2\u00b6\u03e9\3\2\2\2\u00b8\u03ee\3\2\2\2\u00ba")
        buf.write(u"\u03f3\3\2\2\2\u00bc\u03f8\3\2\2\2\u00be\u03fd\3\2\2")
        buf.write(u"\2\u00c0\u0402\3\2\2\2\u00c2\u0407\3\2\2\2\u00c4\u040c")
        buf.write(u"\3\2\2\2\u00c6\u0428\3\2\2\2\u00c8\u042d\3\2\2\2\u00ca")
        buf.write(u"\u0432\3\2\2\2\u00cc\u0437\3\2\2\2\u00ce\u043c\3\2\2")
        buf.write(u"\2\u00d0\u0441\3\2\2\2\u00d2\u0446\3\2\2\2\u00d4\u0452")
        buf.write(u"\3\2\2\2\u00d6\u046d\3\2\2\2\u00d8\u0472\3\2\2\2\u00da")
        buf.write(u"\u0477\3\2\2\2\u00dc\u047c\3\2\2\2\u00de\u0481\3\2\2")
        buf.write(u"\2\u00e0\u0486\3\2\2\2\u00e2\u048b\3\2\2\2\u00e4\u0490")
        buf.write(u"\3\2\2\2\u00e6\u0495\3\2\2\2\u00e8\u049a\3\2\2\2\u00ea")
        buf.write(u"\u049f\3\2\2\2\u00ec\u04b0\3\2\2\2\u00ee\u04b2\3\2\2")
        buf.write(u"\2\u00f0\u04b7\3\2\2\2\u00f2\u04bc\3\2\2\2\u00f4\u04c1")
        buf.write(u"\3\2\2\2\u00f6\u04c6\3\2\2\2\u00f8\u04cb\3\2\2\2\u00fa")
        buf.write(u"\u04d0\3\2\2\2\u00fc\u04d5\3\2\2\2\u00fe\u04da\3\2\2")
        buf.write(u"\2\u0100\u04df\3\2\2\2\u0102\u04e4\3\2\2\2\u0104\u04e9")
        buf.write(u"\3\2\2\2\u0106\u04ee\3\2\2\2\u0108\u04f3\3\2\2\2\u010a")
        buf.write(u"\u04f8\3\2\2\2\u010c\u0504\3\2\2\2\u010e\u0509\3\2\2")
        buf.write(u"\2\u0110\u0511\3\2\2\2\u0112\u0514\3\2\2\2\u0114\u053a")
        buf.write(u"\3\2\2\2\u0116\u053c\3\2\2\2\u0118\u0541\3\2\2\2\u011a")
        buf.write(u"\u0546\3\2\2\2\u011c\u054b\3\2\2\2\u011e\u0557\3\2\2")
        buf.write(u"\2\u0120\u0563\3\2\2\2\u0122\u0568\3\2\2\2\u0124\u056d")
        buf.write(u"\3\2\2\2\u0126\u0572\3\2\2\2\u0128\u0129\5\4\3\2\u0129")
        buf.write(u"\3\3\2\2\2\u012a\u012b\7\3\2\2\u012b\u012c\5\6\4\2\u012c")
        buf.write(u"\u012d\5\b\5\2\u012d\u012e\5\n\6\2\u012e\u012f\5\f\7")
        buf.write(u"\2\u012f\u0130\5\16\b\2\u0130\u0131\7\4\2\2\u0131\5\3")
        buf.write(u"\2\2\2\u0132\u0133\7j\2\2\u0133\u0134\7\5\2\2\u0134\u0135")
        buf.write(u"\7r\2\2\u0135\u0136\7\6\2\2\u0136\7\3\2\2\2\u0137\u0138")
        buf.write(u"\7k\2\2\u0138\u0139\7\5\2\2\u0139\u013a\7\3\2\2\u013a")
        buf.write(u"\u013b\7\4\2\2\u013b\u013c\7\6\2\2\u013c\t\3\2\2\2\u013d")
        buf.write(u"\u013e\7m\2\2\u013e\u013f\7\5\2\2\u013f\u0140\7r\2\2")
        buf.write(u"\u0140\u0141\7\6\2\2\u0141\13\3\2\2\2\u0142\u0143\7n")
        buf.write(u"\2\2\u0143\u0144\7\5\2\2\u0144\u0146\7\3\2\2\u0145\u0147")
        buf.write(u"\5\20\t\2\u0146\u0145\3\2\2\2\u0146\u0147\3\2\2\2\u0147")
        buf.write(u"\u0148\3\2\2\2\u0148\u014a\5\22\n\2\u0149\u014b\5\24")
        buf.write(u"\13\2\u014a\u0149\3\2\2\2\u014a\u014b\3\2\2\2\u014b\u014d")
        buf.write(u"\3\2\2\2\u014c\u014e\5\26\f\2\u014d\u014c\3\2\2\2\u014d")
        buf.write(u"\u014e\3\2\2\2\u014e\u014f\3\2\2\2\u014f\u0150\5\30\r")
        buf.write(u"\2\u0150\u0151\5\32\16\2\u0151\u0153\5\34\17\2\u0152")
        buf.write(u"\u0154\5\36\20\2\u0153\u0152\3\2\2\2\u0153\u0154\3\2")
        buf.write(u"\2\2\u0154\u0156\3\2\2\2\u0155\u0157\5 \21\2\u0156\u0155")
        buf.write(u"\3\2\2\2\u0156\u0157\3\2\2\2\u0157\u0158\3\2\2\2\u0158")
        buf.write(u"\u015a\5\"\22\2\u0159\u015b\5$\23\2\u015a\u0159\3\2\2")
        buf.write(u"\2\u015a\u015b\3\2\2\2\u015b\u015d\3\2\2\2\u015c\u015e")
        buf.write(u"\5&\24\2\u015d\u015c\3\2\2\2\u015d\u015e\3\2\2\2\u015e")
        buf.write(u"\u0160\3\2\2\2\u015f\u0161\5(\25\2\u0160\u015f\3\2\2")
        buf.write(u"\2\u0160\u0161\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0164")
        buf.write(u"\5*\26\2\u0163\u0165\5,\27\2\u0164\u0163\3\2\2\2\u0164")
        buf.write(u"\u0165\3\2\2\2\u0165\u0167\3\2\2\2\u0166\u0168\5.\30")
        buf.write(u"\2\u0167\u0166\3\2\2\2\u0167\u0168\3\2\2\2\u0168\u0169")
        buf.write(u"\3\2\2\2\u0169\u016a\5\60\31\2\u016a\u016c\5\62\32\2")
        buf.write(u"\u016b\u016d\5\64\33\2\u016c\u016b\3\2\2\2\u016c\u016d")
        buf.write(u"\3\2\2\2\u016d\u016e\3\2\2\2\u016e\u016f\7\4\2\2\u016f")
        buf.write(u"\u0170\7\6\2\2\u0170\r\3\2\2\2\u0171\u0172\7o\2\2\u0172")
        buf.write(u"\u0173\7\5\2\2\u0173\u0174\7p\2\2\u0174\u0175\7\6\2\2")
        buf.write(u"\u0175\17\3\2\2\2\u0176\u0178\5\66\34\2\u0177\u0176\3")
        buf.write(u"\2\2\2\u0178\u0179\3\2\2\2\u0179\u0177\3\2\2\2\u0179")
        buf.write(u"\u017a\3\2\2\2\u017a\21\3\2\2\2\u017b\u017d\58\35\2\u017c")
        buf.write(u"\u017b\3\2\2\2\u017d\u017e\3\2\2\2\u017e\u017c\3\2\2")
        buf.write(u"\2\u017e\u017f\3\2\2\2\u017f\23\3\2\2\2\u0180\u0182\5")
        buf.write(u":\36\2\u0181\u0180\3\2\2\2\u0182\u0183\3\2\2\2\u0183")
        buf.write(u"\u0181\3\2\2\2\u0183\u0184\3\2\2\2\u0184\25\3\2\2\2\u0185")
        buf.write(u"\u0187\5<\37\2\u0186\u0185\3\2\2\2\u0187\u0188\3\2\2")
        buf.write(u"\2\u0188\u0186\3\2\2\2\u0188\u0189\3\2\2\2\u0189\27\3")
        buf.write(u"\2\2\2\u018a\u018c\5> \2\u018b\u018a\3\2\2\2\u018c\u018d")
        buf.write(u"\3\2\2\2\u018d\u018b\3\2\2\2\u018d\u018e\3\2\2\2\u018e")
        buf.write(u"\31\3\2\2\2\u018f\u0191\5@!\2\u0190\u018f\3\2\2\2\u0191")
        buf.write(u"\u0192\3\2\2\2\u0192\u0190\3\2\2\2\u0192\u0193\3\2\2")
        buf.write(u"\2\u0193\33\3\2\2\2\u0194\u0196\5B\"\2\u0195\u0194\3")
        buf.write(u"\2\2\2\u0196\u0197\3\2\2\2\u0197\u0195\3\2\2\2\u0197")
        buf.write(u"\u0198\3\2\2\2\u0198\35\3\2\2\2\u0199\u019b\5D#\2\u019a")
        buf.write(u"\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019a\3\2\2")
        buf.write(u"\2\u019c\u019d\3\2\2\2\u019d\37\3\2\2\2\u019e\u01a0\5")
        buf.write(u"F$\2\u019f\u019e\3\2\2\2\u01a0\u01a1\3\2\2\2\u01a1\u019f")
        buf.write(u"\3\2\2\2\u01a1\u01a2\3\2\2\2\u01a2!\3\2\2\2\u01a3\u01a5")
        buf.write(u"\5H%\2\u01a4\u01a3\3\2\2\2\u01a5\u01a6\3\2\2\2\u01a6")
        buf.write(u"\u01a4\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7#\3\2\2\2\u01a8")
        buf.write(u"\u01aa\5J&\2\u01a9\u01a8\3\2\2\2\u01aa\u01ab\3\2\2\2")
        buf.write(u"\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac%\3\2\2")
        buf.write(u"\2\u01ad\u01af\5L\'\2\u01ae\u01ad\3\2\2\2\u01af\u01b0")
        buf.write(u"\3\2\2\2\u01b0\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1")
        buf.write(u"\'\3\2\2\2\u01b2\u01b4\5N(\2\u01b3\u01b2\3\2\2\2\u01b4")
        buf.write(u"\u01b5\3\2\2\2\u01b5\u01b3\3\2\2\2\u01b5\u01b6\3\2\2")
        buf.write(u"\2\u01b6)\3\2\2\2\u01b7\u01b9\5P)\2\u01b8\u01b7\3\2\2")
        buf.write(u"\2\u01b9\u01ba\3\2\2\2\u01ba\u01b8\3\2\2\2\u01ba\u01bb")
        buf.write(u"\3\2\2\2\u01bb+\3\2\2\2\u01bc\u01be\5R*\2\u01bd\u01bc")
        buf.write(u"\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01bd\3\2\2\2\u01bf")
        buf.write(u"\u01c0\3\2\2\2\u01c0-\3\2\2\2\u01c1\u01c3\5T+\2\u01c2")
        buf.write(u"\u01c1\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c2\3\2\2")
        buf.write(u"\2\u01c4\u01c5\3\2\2\2\u01c5/\3\2\2\2\u01c6\u01c8\5V")
        buf.write(u",\2\u01c7\u01c6\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01c7")
        buf.write(u"\3\2\2\2\u01c9\u01ca\3\2\2\2\u01ca\61\3\2\2\2\u01cb\u01cd")
        buf.write(u"\5X-\2\u01cc\u01cb\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce")
        buf.write(u"\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\63\3\2\2\2\u01d0")
        buf.write(u"\u01d2\5Z.\2\u01d1\u01d0\3\2\2\2\u01d2\u01d3\3\2\2\2")
        buf.write(u"\u01d3\u01d1\3\2\2\2\u01d3\u01d4\3\2\2\2\u01d4\65\3\2")
        buf.write(u"\2\2\u01d5\u01d6\7p\2\2\u01d6\u01d7\7\5\2\2\u01d7\u01d8")
        buf.write(u"\7\3\2\2\u01d8\u01d9\5\\/\2\u01d9\u01da\5\u00b0Y\2\u01da")
        buf.write(u"\u01db\5\u00b2Z\2\u01db\u01dc\5\u00b6\\\2\u01dc\u01dd")
        buf.write(u"\5\u009eP\2\u01dd\u01de\5\u00b8]\2\u01de\u01df\7\4\2")
        buf.write(u"\2\u01df\u01e0\7\6\2\2\u01e0\67\3\2\2\2\u01e1\u01e2\7")
        buf.write(u"p\2\2\u01e2\u01e3\7\5\2\2\u01e3\u01e4\7\3\2\2\u01e4\u01e5")
        buf.write(u"\5^\60\2\u01e5\u01e7\5\u0082B\2\u01e6\u01e8\5\u011c\u008f")
        buf.write(u"\2\u01e7\u01e6\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e9")
        buf.write(u"\3\2\2\2\u01e9\u01ea\7\4\2\2\u01ea\u01eb\7\6\2\2\u01eb")
        buf.write(u"9\3\2\2\2\u01ec\u01ed\7p\2\2\u01ed\u01ee\7\5\2\2\u01ee")
        buf.write(u"\u01ef\7\3\2\2\u01ef\u01f0\5`\61\2\u01f0\u01f1\5\u0084")
        buf.write(u"C\2\u01f1\u01f2\5\u0086D\2\u01f2\u01f3\5\u0088E\2\u01f3")
        buf.write(u"\u01f4\5\u008aF\2\u01f4\u01f5\7\4\2\2\u01f5\u01f6\7\6")
        buf.write(u"\2\2\u01f6;\3\2\2\2\u01f7\u01f8\7p\2\2\u01f8\u01f9\7")
        buf.write(u"\5\2\2\u01f9\u01fa\7\3\2\2\u01fa\u01fb\5b\62\2\u01fb")
        buf.write(u"\u01fc\5\u00a4S\2\u01fc\u01fd\5\u010c\u0087\2\u01fd\u01fe")
        buf.write(u"\5\u010e\u0088\2\u01fe\u0200\5\u00a6T\2\u01ff\u0201\5")
        buf.write(u"\u009eP\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write(u"\u0202\3\2\2\2\u0202\u0203\5\u00a8U\2\u0203\u0204\7\4")
        buf.write(u"\2\2\u0204\u0205\7\6\2\2\u0205=\3\2\2\2\u0206\u0207\7")
        buf.write(u"p\2\2\u0207\u0208\7\5\2\2\u0208\u0209\7\3\2\2\u0209\u020b")
        buf.write(u"\5d\63\2\u020a\u020c\5\u008eH\2\u020b\u020a\3\2\2\2\u020b")
        buf.write(u"\u020c\3\2\2\2\u020c\u020e\3\2\2\2\u020d\u020f\5\u008c")
        buf.write(u"G\2\u020e\u020d\3\2\2\2\u020e\u020f\3\2\2\2\u020f\u0211")
        buf.write(u"\3\2\2\2\u0210\u0212\5\u0092J\2\u0211\u0210\3\2\2\2\u0211")
        buf.write(u"\u0212\3\2\2\2\u0212\u0214\3\2\2\2\u0213\u0215\5\u0090")
        buf.write(u"I\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215\u0217")
        buf.write(u"\3\2\2\2\u0216\u0218\5\u00be`\2\u0217\u0216\3\2\2\2\u0217")
        buf.write(u"\u0218\3\2\2\2\u0218\u021a\3\2\2\2\u0219\u021b\5\u009e")
        buf.write(u"P\2\u021a\u0219\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021d")
        buf.write(u"\3\2\2\2\u021c\u021e\5\u00a0Q\2\u021d\u021c\3\2\2\2\u021d")
        buf.write(u"\u021e\3\2\2\2\u021e\u0220\3\2\2\2\u021f\u0221\5\u00c2")
        buf.write(u"b\2\u0220\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0223")
        buf.write(u"\3\2\2\2\u0222\u0224\5\u00a2R\2\u0223\u0222\3\2\2\2\u0223")
        buf.write(u"\u0224\3\2\2\2\u0224\u0226\3\2\2\2\u0225\u0227\5\u00c0")
        buf.write(u"a\2\u0226\u0225\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0228")
        buf.write(u"\3\2\2\2\u0228\u0229\7\4\2\2\u0229\u022a\7\6\2\2\u022a")
        buf.write(u"?\3\2\2\2\u022b\u022c\7p\2\2\u022c\u022d\7\5\2\2\u022d")
        buf.write(u"\u022e\7\3\2\2\u022e\u022f\5f\64\2\u022f\u0230\5\u00a4")
        buf.write(u"S\2\u0230\u0231\5\u00a6T\2\u0231\u0232\5\u00a8U\2\u0232")
        buf.write(u"\u0233\7\4\2\2\u0233\u0234\7\6\2\2\u0234A\3\2\2\2\u0235")
        buf.write(u"\u0236\7p\2\2\u0236\u0237\7\5\2\2\u0237\u0238\7\3\2\2")
        buf.write(u"\u0238\u0239\5h\65\2\u0239\u023b\5\u009aN\2\u023a\u023c")
        buf.write(u"\5\u0094K\2\u023b\u023a\3\2\2\2\u023b\u023c\3\2\2\2\u023c")
        buf.write(u"\u023e\3\2\2\2\u023d\u023f\5\u009eP\2\u023e\u023d\3\2")
        buf.write(u"\2\2\u023e\u023f\3\2\2\2\u023f\u0241\3\2\2\2\u0240\u0242")
        buf.write(u"\5\u00a0Q\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write(u"\u0243\3\2\2\2\u0243\u0245\5\u00a2R\2\u0244\u0246\5\u0096")
        buf.write(u"L\2\u0245\u0244\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u0248")
        buf.write(u"\3\2\2\2\u0247\u0249\5\u0098M\2\u0248\u0247\3\2\2\2\u0248")
        buf.write(u"\u0249\3\2\2\2\u0249\u024a\3\2\2\2\u024a\u024b\7\4\2")
        buf.write(u"\2\u024b\u024c\7\6\2\2\u024cC\3\2\2\2\u024d\u024e\7p")
        buf.write(u"\2\2\u024e\u024f\7\5\2\2\u024f\u0250\7\3\2\2\u0250\u0251")
        buf.write(u"\5j\66\2\u0251\u0252\5\u00a4S\2\u0252\u0253\5\u00a6T")
        buf.write(u"\2\u0253\u0254\5\u00a8U\2\u0254\u0255\7\4\2\2\u0255\u0256")
        buf.write(u"\7\6\2\2\u0256E\3\2\2\2\u0257\u0258\7p\2\2\u0258\u0259")
        buf.write(u"\7\5\2\2\u0259\u025a\7\3\2\2\u025a\u025b\5l\67\2\u025b")
        buf.write(u"\u025c\5\u00b0Y\2\u025c\u025d\5\u00b2Z\2\u025d\u025e")
        buf.write(u"\5\u00b4[\2\u025e\u025f\5\u00b6\\\2\u025f\u0261\5\u009e")
        buf.write(u"P\2\u0260\u0262\5\u009cO\2\u0261\u0260\3\2\2\2\u0261")
        buf.write(u"\u0262\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0264\5\u00b8")
        buf.write(u"]\2\u0264\u0265\5\u00ba^\2\u0265\u0266\5\u00bc_\2\u0266")
        buf.write(u"\u0267\7\4\2\2\u0267\u0268\7\6\2\2\u0268G\3\2\2\2\u0269")
        buf.write(u"\u026a\7p\2\2\u026a\u026b\7\5\2\2\u026b\u026c\7\3\2\2")
        buf.write(u"\u026c\u026d\5n8\2\u026d\u026e\5\u00c4c\2\u026e\u026f")
        buf.write(u"\5\u00b0Y\2\u026f\u0270\5\u00dep\2\u0270\u0271\5\u00e0")
        buf.write(u"q\2\u0271\u0272\5\u00e2r\2\u0272\u0273\5\u00e4s\2\u0273")
        buf.write(u"\u0275\5\u00e6t\2\u0274\u0276\5\u00e8u\2\u0275\u0274")
        buf.write(u"\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write(u"\u0279\5\u00eav\2\u0278\u027a\5\u00ecw\2\u0279\u0278")
        buf.write(u"\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u027b\3\2\2\2\u027b")
        buf.write(u"\u027c\5\u00eex\2\u027c\u027d\5\u00f0y\2\u027d\u027e")
        buf.write(u"\7\4\2\2\u027e\u027f\7\6\2\2\u027fI\3\2\2\2\u0280\u0281")
        buf.write(u"\7p\2\2\u0281\u0282\7\5\2\2\u0282\u0283\7\3\2\2\u0283")
        buf.write(u"\u0284\5p9\2\u0284\u0285\5\u0104\u0083\2\u0285\u0286")
        buf.write(u"\5\u00a0Q\2\u0286\u0287\5\u0106\u0084\2\u0287\u0288\5")
        buf.write(u"\u00a2R\2\u0288\u0289\7\4\2\2\u0289\u028a\7\6\2\2\u028a")
        buf.write(u"K\3\2\2\2\u028b\u028c\7p\2\2\u028c\u028d\7\5\2\2\u028d")
        buf.write(u"\u028e\7\3\2\2\u028e\u028f\5r:\2\u028f\u0290\5\u00a4")
        buf.write(u"S\2\u0290\u0291\5\u00a6T\2\u0291\u0292\5\u00a8U\2\u0292")
        buf.write(u"\u0293\7\4\2\2\u0293\u0294\7\6\2\2\u0294M\3\2\2\2\u0295")
        buf.write(u"\u0296\7p\2\2\u0296\u0297\7\5\2\2\u0297\u0298\7\3\2\2")
        buf.write(u"\u0298\u0299\5t;\2\u0299\u029a\5\u00a4S\2\u029a\u029c")
        buf.write(u"\5\u00a6T\2\u029b\u029d\5\u00f2z\2\u029c\u029b\3\2\2")
        buf.write(u"\2\u029c\u029d\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u02a0")
        buf.write(u"\5\u00f4{\2\u029f\u02a1\5\u009eP\2\u02a0\u029f\3\2\2")
        buf.write(u"\2\u02a0\u02a1\3\2\2\2\u02a1\u02a3\3\2\2\2\u02a2\u02a4")
        buf.write(u"\5\u00f6|\2\u02a3\u02a2\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4")
        buf.write(u"\u02a5\3\2\2\2\u02a5\u02a6\5\u00f8}\2\u02a6\u02a7\5\u00a8")
        buf.write(u"U\2\u02a7\u02a8\5\u00fa~\2\u02a8\u02aa\5\u00fc\177\2")
        buf.write(u"\u02a9\u02ab\5\u00fe\u0080\2\u02aa\u02a9\3\2\2\2\u02aa")
        buf.write(u"\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ad\7\4\2")
        buf.write(u"\2\u02ad\u02ae\7\6\2\2\u02aeO\3\2\2\2\u02af\u02b0\7p")
        buf.write(u"\2\2\u02b0\u02b1\7\5\2\2\u02b1\u02b2\7\3\2\2\u02b2\u02b3")
        buf.write(u"\5v<\2\u02b3\u02b4\5\u00a4S\2\u02b4\u02b5\5\u00a6T\2")
        buf.write(u"\u02b5\u02b6\5\u00a8U\2\u02b6\u02b7\7\4\2\2\u02b7\u02b8")
        buf.write(u"\7\6\2\2\u02b8Q\3\2\2\2\u02b9\u02ba\7p\2\2\u02ba\u02bb")
        buf.write(u"\7\5\2\2\u02bb\u02bc\7\3\2\2\u02bc\u02be\5x=\2\u02bd")
        buf.write(u"\u02bf\5\u009eP\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2")
        buf.write(u"\2\2\u02bf\u02c1\3\2\2\2\u02c0\u02c2\5\u0100\u0081\2")
        buf.write(u"\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c3")
        buf.write(u"\3\2\2\2\u02c3\u02c4\5\u0102\u0082\2\u02c4\u02c5\7\4")
        buf.write(u"\2\2\u02c5\u02c6\7\6\2\2\u02c6S\3\2\2\2\u02c7\u02c8\7")
        buf.write(u"p\2\2\u02c8\u02c9\7\5\2\2\u02c9\u02ca\7\3\2\2\u02ca\u02cb")
        buf.write(u"\5z>\2\u02cb\u02cc\5\u009aN\2\u02cc\u02ce\5\u009eP\2")
        buf.write(u"\u02cd\u02cf\5\u00a0Q\2\u02ce\u02cd\3\2\2\2\u02ce\u02cf")
        buf.write(u"\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\5\u00a2R\2\u02d1")
        buf.write(u"\u02d2\7\4\2\2\u02d2\u02d3\7\6\2\2\u02d3U\3\2\2\2\u02d4")
        buf.write(u"\u02d5\7p\2\2\u02d5\u02d6\7\5\2\2\u02d6\u02d7\7\3\2\2")
        buf.write(u"\u02d7\u02d9\5|?\2\u02d8\u02da\5\u0108\u0085\2\u02d9")
        buf.write(u"\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02db\3\2\2")
        buf.write(u"\2\u02db\u02dc\5\u010a\u0086\2\u02dc\u02dd\5\u009eP\2")
        buf.write(u"\u02dd\u02de\7\4\2\2\u02de\u02df\7\6\2\2\u02dfW\3\2\2")
        buf.write(u"\2\u02e0\u02e1\7p\2\2\u02e1\u02e2\7\5\2\2\u02e2\u02e3")
        buf.write(u"\7\3\2\2\u02e3\u02e4\5~@\2\u02e4\u02e5\5\u0116\u008c")
        buf.write(u"\2\u02e5\u02e7\5\u0118\u008d\2\u02e6\u02e8\5\u011a\u008e")
        buf.write(u"\2\u02e7\u02e6\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02e9")
        buf.write(u"\3\2\2\2\u02e9\u02ea\7\4\2\2\u02ea\u02eb\7\6\2\2\u02eb")
        buf.write(u"Y\3\2\2\2\u02ec\u02ed\7p\2\2\u02ed\u02ee\7\5\2\2\u02ee")
        buf.write(u"\u02ef\7\3\2\2\u02ef\u02f0\5\u0080A\2\u02f0\u02f1\5\u009a")
        buf.write(u"N\2\u02f1\u02f2\5\u0120\u0091\2\u02f2\u02f3\5\u00a0Q")
        buf.write(u"\2\u02f3\u02f4\5\u00a2R\2\u02f4\u02f5\5\u0122\u0092\2")
        buf.write(u"\u02f5\u02f6\7\4\2\2\u02f6\u02f7\7\6\2\2\u02f7[\3\2\2")
        buf.write(u"\2\u02f8\u02f9\7l\2\2\u02f9\u02fa\7\5\2\2\u02fa\u02fb")
        buf.write(u"\7\7\2\2\u02fb\u02fc\7\6\2\2\u02fc]\3\2\2\2\u02fd\u02fe")
        buf.write(u"\7l\2\2\u02fe\u02ff\7\5\2\2\u02ff\u0300\7\b\2\2\u0300")
        buf.write(u"\u0301\7\6\2\2\u0301_\3\2\2\2\u0302\u0303\7l\2\2\u0303")
        buf.write(u"\u0304\7\5\2\2\u0304\u0305\7\t\2\2\u0305\u0306\7\6\2")
        buf.write(u"\2\u0306a\3\2\2\2\u0307\u0308\7l\2\2\u0308\u0309\7\5")
        buf.write(u"\2\2\u0309\u030a\7\n\2\2\u030a\u030b\7\6\2\2\u030bc\3")
        buf.write(u"\2\2\2\u030c\u030d\7l\2\2\u030d\u030e\7\5\2\2\u030e\u030f")
        buf.write(u"\7\13\2\2\u030f\u0310\7\6\2\2\u0310e\3\2\2\2\u0311\u0312")
        buf.write(u"\7l\2\2\u0312\u0313\7\5\2\2\u0313\u0314\7\f\2\2\u0314")
        buf.write(u"\u0315\7\6\2\2\u0315g\3\2\2\2\u0316\u0317\7l\2\2\u0317")
        buf.write(u"\u0318\7\5\2\2\u0318\u0319\7\r\2\2\u0319\u031a\7\6\2")
        buf.write(u"\2\u031ai\3\2\2\2\u031b\u031c\7l\2\2\u031c\u031d\7\5")
        buf.write(u"\2\2\u031d\u031e\7\16\2\2\u031e\u031f\7\6\2\2\u031fk")
        buf.write(u"\3\2\2\2\u0320\u0321\7l\2\2\u0321\u0322\7\5\2\2\u0322")
        buf.write(u"\u0323\7\17\2\2\u0323\u0324\7\6\2\2\u0324m\3\2\2\2\u0325")
        buf.write(u"\u0326\7l\2\2\u0326\u0327\7\5\2\2\u0327\u0328\7\20\2")
        buf.write(u"\2\u0328\u0329\7\6\2\2\u0329o\3\2\2\2\u032a\u032b\7l")
        buf.write(u"\2\2\u032b\u032c\7\5\2\2\u032c\u032d\7\21\2\2\u032d\u032e")
        buf.write(u"\7\6\2\2\u032eq\3\2\2\2\u032f\u0330\7l\2\2\u0330\u0331")
        buf.write(u"\7\5\2\2\u0331\u0332\7\22\2\2\u0332\u0333\7\6\2\2\u0333")
        buf.write(u"s\3\2\2\2\u0334\u0335\7l\2\2\u0335\u0336\7\5\2\2\u0336")
        buf.write(u"\u0337\7\23\2\2\u0337\u0338\7\6\2\2\u0338u\3\2\2\2\u0339")
        buf.write(u"\u033a\7l\2\2\u033a\u033b\7\5\2\2\u033b\u033c\7\24\2")
        buf.write(u"\2\u033c\u033d\7\6\2\2\u033dw\3\2\2\2\u033e\u033f\7l")
        buf.write(u"\2\2\u033f\u0340\7\5\2\2\u0340\u0341\7\25\2\2\u0341\u0342")
        buf.write(u"\7\6\2\2\u0342y\3\2\2\2\u0343\u0344\7l\2\2\u0344\u0345")
        buf.write(u"\7\5\2\2\u0345\u0346\7\26\2\2\u0346\u0347\7\6\2\2\u0347")
        buf.write(u"{\3\2\2\2\u0348\u0349\7l\2\2\u0349\u034a\7\5\2\2\u034a")
        buf.write(u"\u034b\7\27\2\2\u034b\u034c\7\6\2\2\u034c}\3\2\2\2\u034d")
        buf.write(u"\u034e\7l\2\2\u034e\u034f\7\5\2\2\u034f\u0350\7\30\2")
        buf.write(u"\2\u0350\u0351\7\6\2\2\u0351\177\3\2\2\2\u0352\u0353")
        buf.write(u"\7l\2\2\u0353\u0354\7\5\2\2\u0354\u0355\7\31\2\2\u0355")
        buf.write(u"\u0356\7\6\2\2\u0356\u0081\3\2\2\2\u0357\u0358\7\32\2")
        buf.write(u"\2\u0358\u0359\7\5\2\2\u0359\u035a\7p\2\2\u035a\u035b")
        buf.write(u"\7\6\2\2\u035b\u0083\3\2\2\2\u035c\u035d\7\33\2\2\u035d")
        buf.write(u"\u035e\7\5\2\2\u035e\u035f\7p\2\2\u035f\u0360\7\6\2\2")
        buf.write(u"\u0360\u0085\3\2\2\2\u0361\u0362\7\34\2\2\u0362\u0363")
        buf.write(u"\7\5\2\2\u0363\u0364\7r\2\2\u0364\u0365\7\6\2\2\u0365")
        buf.write(u"\u0087\3\2\2\2\u0366\u0367\7\35\2\2\u0367\u0368\7\5\2")
        buf.write(u"\2\u0368\u0369\7p\2\2\u0369\u036a\7\6\2\2\u036a\u0089")
        buf.write(u"\3\2\2\2\u036b\u036c\7\36\2\2\u036c\u036d\7\5\2\2\u036d")
        buf.write(u"\u036e\5\u0126\u0094\2\u036e\u036f\7\6\2\2\u036f\u008b")
        buf.write(u"\3\2\2\2\u0370\u0371\7\37\2\2\u0371\u0372\7\5\2\2\u0372")
        buf.write(u"\u0373\7r\2\2\u0373\u0374\7\6\2\2\u0374\u008d\3\2\2\2")
        buf.write(u"\u0375\u0376\7 \2\2\u0376\u0377\7\5\2\2\u0377\u0378\5")
        buf.write(u"\u0126\u0094\2\u0378\u0379\7\6\2\2\u0379\u008f\3\2\2")
        buf.write(u"\2\u037a\u037b\7!\2\2\u037b\u037c\7\5\2\2\u037c\u037d")
        buf.write(u"\5\u0126\u0094\2\u037d\u037e\7\6\2\2\u037e\u0091\3\2")
        buf.write(u"\2\2\u037f\u0380\7\"\2\2\u0380\u0381\7\5\2\2\u0381\u0382")
        buf.write(u"\7r\2\2\u0382\u0383\7\6\2\2\u0383\u0093\3\2\2\2\u0384")
        buf.write(u"\u0385\7#\2\2\u0385\u0386\7\5\2\2\u0386\u0387\7r\2\2")
        buf.write(u"\u0387\u0388\7\6\2\2\u0388\u0095\3\2\2\2\u0389\u038a")
        buf.write(u"\7$\2\2\u038a\u038b\7\5\2\2\u038b\u038c\7r\2\2\u038c")
        buf.write(u"\u038d\7\6\2\2\u038d\u0097\3\2\2\2\u038e\u038f\7%\2\2")
        buf.write(u"\u038f\u0390\7\5\2\2\u0390\u0391\7r\2\2\u0391\u0392\7")
        buf.write(u"\6\2\2\u0392\u0099\3\2\2\2\u0393\u0394\7&\2\2\u0394\u0395")
        buf.write(u"\7\5\2\2\u0395\u0396\5\u00aaV\2\u0396\u0397\7\6\2\2\u0397")
        buf.write(u"\u009b\3\2\2\2\u0398\u0399\7\'\2\2\u0399\u039a\7\5\2")
        buf.write(u"\2\u039a\u039b\7q\2\2\u039b\u039c\7\6\2\2\u039c\u009d")
        buf.write(u"\3\2\2\2\u039d\u039e\7(\2\2\u039e\u039f\7\5\2\2\u039f")
        buf.write(u"\u03a0\t\2\2\2\u03a0\u03a1\7\6\2\2\u03a1\u009f\3\2\2")
        buf.write(u"\2\u03a2\u03a3\7)\2\2\u03a3\u03a4\7\5\2\2\u03a4\u03a5")
        buf.write(u"\t\2\2\2\u03a5\u03a6\7\6\2\2\u03a6\u00a1\3\2\2\2\u03a7")
        buf.write(u"\u03a8\7*\2\2\u03a8\u03a9\7\5\2\2\u03a9\u03aa\t\2\2\2")
        buf.write(u"\u03aa\u03ab\7\6\2\2\u03ab\u00a3\3\2\2\2\u03ac\u03ad")
        buf.write(u"\7+\2\2\u03ad\u03ae\7\5\2\2\u03ae\u03af\7r\2\2\u03af")
        buf.write(u"\u03b0\7\6\2\2\u03b0\u00a5\3\2\2\2\u03b1\u03b2\7,\2\2")
        buf.write(u"\u03b2\u03b3\7\5\2\2\u03b3\u03b4\5\u00aaV\2\u03b4\u03b5")
        buf.write(u"\7\6\2\2\u03b5\u00a7\3\2\2\2\u03b6\u03b7\7-\2\2\u03b7")
        buf.write(u"\u03b8\7\5\2\2\u03b8\u03b9\7r\2\2\u03b9\u03ba\7\6\2\2")
        buf.write(u"\u03ba\u00a9\3\2\2\2\u03bb\u03c0\7.\2\2\u03bc\u03bd\7")
        buf.write(u"p\2\2\u03bd\u03bf\7/\2\2\u03be\u03bc\3\2\2\2\u03bf\u03c2")
        buf.write(u"\3\2\2\2\u03c0\u03be\3\2\2\2\u03c0\u03c1\3\2\2\2\u03c1")
        buf.write(u"\u03c3\3\2\2\2\u03c2\u03c0\3\2\2\2\u03c3\u03c4\7\60\2")
        buf.write(u"\2\u03c4\u00ab\3\2\2\2\u03c5\u03cb\7.\2\2\u03c6\u03c7")
        buf.write(u"\5\u0126\u0094\2\u03c7\u03c8\7/\2\2\u03c8\u03ca\3\2\2")
        buf.write(u"\2\u03c9\u03c6\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb\u03c9")
        buf.write(u"\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03ce\3\2\2\2\u03cd")
        buf.write(u"\u03cb\3\2\2\2\u03ce\u03cf\7\60\2\2\u03cf\u00ad\3\2\2")
        buf.write(u"\2\u03d0\u03d5\7.\2\2\u03d1\u03d2\7r\2\2\u03d2\u03d4")
        buf.write(u"\7/\2\2\u03d3\u03d1\3\2\2\2\u03d4\u03d7\3\2\2\2\u03d5")
        buf.write(u"\u03d3\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d8\3\2\2")
        buf.write(u"\2\u03d7\u03d5\3\2\2\2\u03d8\u03d9\7\60\2\2\u03d9\u00af")
        buf.write(u"\3\2\2\2\u03da\u03db\7\61\2\2\u03db\u03dc\7\5\2\2\u03dc")
        buf.write(u"\u03dd\7p\2\2\u03dd\u03de\7\6\2\2\u03de\u00b1\3\2\2\2")
        buf.write(u"\u03df\u03e0\7\62\2\2\u03e0\u03e1\7\5\2\2\u03e1\u03e2")
        buf.write(u"\5\u00aaV\2\u03e2\u03e3\7\6\2\2\u03e3\u00b3\3\2\2\2\u03e4")
        buf.write(u"\u03e5\7\63\2\2\u03e5\u03e6\7\5\2\2\u03e6\u03e7\5\u00aa")
        buf.write(u"V\2\u03e7\u03e8\7\6\2\2\u03e8\u00b5\3\2\2\2\u03e9\u03ea")
        buf.write(u"\7\64\2\2\u03ea\u03eb\7\5\2\2\u03eb\u03ec\5\u00aaV\2")
        buf.write(u"\u03ec\u03ed\7\6\2\2\u03ed\u00b7\3\2\2\2\u03ee\u03ef")
        buf.write(u"\7\65\2\2\u03ef\u03f0\7\5\2\2\u03f0\u03f1\5\u0126\u0094")
        buf.write(u"\2\u03f1\u03f2\7\6\2\2\u03f2\u00b9\3\2\2\2\u03f3\u03f4")
        buf.write(u"\7\66\2\2\u03f4\u03f5\7\5\2\2\u03f5\u03f6\7p\2\2\u03f6")
        buf.write(u"\u03f7\7\6\2\2\u03f7\u00bb\3\2\2\2\u03f8\u03f9\7\67\2")
        buf.write(u"\2\u03f9\u03fa\7\5\2\2\u03fa\u03fb\7q\2\2\u03fb\u03fc")
        buf.write(u"\7\6\2\2\u03fc\u00bd\3\2\2\2\u03fd\u03fe\78\2\2\u03fe")
        buf.write(u"\u03ff\7\5\2\2\u03ff\u0400\7r\2\2\u0400\u0401\7\6\2\2")
        buf.write(u"\u0401\u00bf\3\2\2\2\u0402\u0403\79\2\2\u0403\u0404\7")
        buf.write(u"\5\2\2\u0404\u0405\5\u0126\u0094\2\u0405\u0406\7\6\2")
        buf.write(u"\2\u0406\u00c1\3\2\2\2\u0407\u0408\7:\2\2\u0408\u0409")
        buf.write(u"\7\5\2\2\u0409\u040a\5\u0126\u0094\2\u040a\u040b\7\6")
        buf.write(u"\2\2\u040b\u00c3\3\2\2\2\u040c\u040d\7;\2\2\u040d\u040e")
        buf.write(u"\7\5\2\2\u040e\u0410\7\3\2\2\u040f\u0411\5\u0124\u0093")
        buf.write(u"\2\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0413")
        buf.write(u"\3\2\2\2\u0412\u0414\5\u00c8e\2\u0413\u0412\3\2\2\2\u0413")
        buf.write(u"\u0414\3\2\2\2\u0414\u0416\3\2\2\2\u0415\u0417\5\u00c6")
        buf.write(u"d\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417\u0419")
        buf.write(u"\3\2\2\2\u0418\u041a\5\u00caf\2\u0419\u0418\3\2\2\2\u0419")
        buf.write(u"\u041a\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041d\5\u00cc")
        buf.write(u"g\2\u041c\u041e\5\u00ceh\2\u041d\u041c\3\2\2\2\u041d")
        buf.write(u"\u041e\3\2\2\2\u041e\u0420\3\2\2\2\u041f\u0421\5\u00d0")
        buf.write(u"i\2\u0420\u041f\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0423")
        buf.write(u"\3\2\2\2\u0422\u0424\5\u00d2j\2\u0423\u0422\3\2\2\2\u0423")
        buf.write(u"\u0424\3\2\2\2\u0424\u0425\3\2\2\2\u0425\u0426\7\4\2")
        buf.write(u"\2\u0426\u0427\7\6\2\2\u0427\u00c5\3\2\2\2\u0428\u0429")
        buf.write(u"\7<\2\2\u0429\u042a\7\5\2\2\u042a\u042b\7r\2\2\u042b")
        buf.write(u"\u042c\7\6\2\2\u042c\u00c7\3\2\2\2\u042d\u042e\7=\2\2")
        buf.write(u"\u042e\u042f\7\5\2\2\u042f\u0430\7r\2\2\u0430\u0431\7")
        buf.write(u"\6\2\2\u0431\u00c9\3\2\2\2\u0432\u0433\7>\2\2\u0433\u0434")
        buf.write(u"\7\5\2\2\u0434\u0435\7r\2\2\u0435\u0436\7\6\2\2\u0436")
        buf.write(u"\u00cb\3\2\2\2\u0437\u0438\7?\2\2\u0438\u0439\7\5\2\2")
        buf.write(u"\u0439\u043a\7r\2\2\u043a\u043b\7\6\2\2\u043b\u00cd\3")
        buf.write(u"\2\2\2\u043c\u043d\7@\2\2\u043d\u043e\7\5\2\2\u043e\u043f")
        buf.write(u"\7r\2\2\u043f\u0440\7\6\2\2\u0440\u00cf\3\2\2\2\u0441")
        buf.write(u"\u0442\7A\2\2\u0442\u0443\7\5\2\2\u0443\u0444\5\u0126")
        buf.write(u"\u0094\2\u0444\u0445\7\6\2\2\u0445\u00d1\3\2\2\2\u0446")
        buf.write(u"\u0447\7B\2\2\u0447\u0448\7\5\2\2\u0448\u044c\7\3\2\2")
        buf.write(u"\u0449\u044b\5\u00d4k\2\u044a\u0449\3\2\2\2\u044b\u044e")
        buf.write(u"\3\2\2\2\u044c\u044a\3\2\2\2\u044c\u044d\3\2\2\2\u044d")
        buf.write(u"\u044f\3\2\2\2\u044e\u044c\3\2\2\2\u044f\u0450\7\4\2")
        buf.write(u"\2\u0450\u0451\7\6\2\2\u0451\u00d3\3\2\2\2\u0452\u0453")
        buf.write(u"\7p\2\2\u0453\u0454\7\5\2\2\u0454\u0456\7\3\2\2\u0455")
        buf.write(u"\u0457\5\u00d6l\2\u0456\u0455\3\2\2\2\u0456\u0457\3\2")
        buf.write(u"\2\2\u0457\u0459\3\2\2\2\u0458\u045a\5\u00d8m\2\u0459")
        buf.write(u"\u0458\3\2\2\2\u0459\u045a\3\2\2\2\u045a\u045c\3\2\2")
        buf.write(u"\2\u045b\u045d\5\u00dan\2\u045c\u045b\3\2\2\2\u045c\u045d")
        buf.write(u"\3\2\2\2\u045d\u045f\3\2\2\2\u045e\u0460\5\u00c6d\2\u045f")
        buf.write(u"\u045e\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0462\3\2\2")
        buf.write(u"\2\u0461\u0463\5\u00dco\2\u0462\u0461\3\2\2\2\u0462\u0463")
        buf.write(u"\3\2\2\2\u0463\u0465\3\2\2\2\u0464\u0466\5\u011e\u0090")
        buf.write(u"\2\u0465\u0464\3\2\2\2\u0465\u0466\3\2\2\2\u0466\u0468")
        buf.write(u"\3\2\2\2\u0467\u0469\5\u00d8m\2\u0468\u0467\3\2\2\2\u0468")
        buf.write(u"\u0469\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b\7\4\2")
        buf.write(u"\2\u046b\u046c\7\6\2\2\u046c\u00d5\3\2\2\2\u046d\u046e")
        buf.write(u"\7C\2\2\u046e\u046f\7\5\2\2\u046f\u0470\7r\2\2\u0470")
        buf.write(u"\u0471\7\6\2\2\u0471\u00d7\3\2\2\2\u0472\u0473\7D\2\2")
        buf.write(u"\u0473\u0474\7\5\2\2\u0474\u0475\7p\2\2\u0475\u0476\7")
        buf.write(u"\6\2\2\u0476\u00d9\3\2\2\2\u0477\u0478\7E\2\2\u0478\u0479")
        buf.write(u"\7\5\2\2\u0479\u047a\7r\2\2\u047a\u047b\7\6\2\2\u047b")
        buf.write(u"\u00db\3\2\2\2\u047c\u047d\7F\2\2\u047d\u047e\7\5\2\2")
        buf.write(u"\u047e\u047f\7r\2\2\u047f\u0480\7\6\2\2\u0480\u00dd\3")
        buf.write(u"\2\2\2\u0481\u0482\7G\2\2\u0482\u0483\7\5\2\2\u0483\u0484")
        buf.write(u"\7q\2\2\u0484\u0485\7\6\2\2\u0485\u00df\3\2\2\2\u0486")
        buf.write(u"\u0487\7H\2\2\u0487\u0488\7\5\2\2\u0488\u0489\7r\2\2")
        buf.write(u"\u0489\u048a\7\6\2\2\u048a\u00e1\3\2\2\2\u048b\u048c")
        buf.write(u"\7I\2\2\u048c\u048d\7\5\2\2\u048d\u048e\7r\2\2\u048e")
        buf.write(u"\u048f\7\6\2\2\u048f\u00e3\3\2\2\2\u0490\u0491\7J\2\2")
        buf.write(u"\u0491\u0492\7\5\2\2\u0492\u0493\5\u00acW\2\u0493\u0494")
        buf.write(u"\7\6\2\2\u0494\u00e5\3\2\2\2\u0495\u0496\7K\2\2\u0496")
        buf.write(u"\u0497\7\5\2\2\u0497\u0498\7p\2\2\u0498\u0499\7\6\2\2")
        buf.write(u"\u0499\u00e7\3\2\2\2\u049a\u049b\7L\2\2\u049b\u049c\7")
        buf.write(u"\5\2\2\u049c\u049d\7p\2\2\u049d\u049e\7\6\2\2\u049e\u00e9")
        buf.write(u"\3\2\2\2\u049f\u04a0\7M\2\2\u04a0\u04a1\7\5\2\2\u04a1")
        buf.write(u"\u04a2\t\2\2\2\u04a2\u04a3\7\6\2\2\u04a3\u00eb\3\2\2")
        buf.write(u"\2\u04a4\u04a5\7N\2\2\u04a5\u04a6\7\5\2\2\u04a6\u04a7")
        buf.write(u"\5\u0126\u0094\2\u04a7\u04a8\7\6\2\2\u04a8\u04b1\3\2")
        buf.write(u"\2\2\u04a9\u04aa\7N\2\2\u04aa\u04ab\7\5\2\2\u04ab\u04ac")
        buf.write(u"\7.\2\2\u04ac\u04ad\5\u0110\u0089\2\u04ad\u04ae\7\60")
        buf.write(u"\2\2\u04ae\u04af\7\6\2\2\u04af\u04b1\3\2\2\2\u04b0\u04a4")
        buf.write(u"\3\2\2\2\u04b0\u04a9\3\2\2\2\u04b1\u00ed\3\2\2\2\u04b2")
        buf.write(u"\u04b3\7O\2\2\u04b3\u04b4\7\5\2\2\u04b4\u04b5\t\2\2\2")
        buf.write(u"\u04b5\u04b6\7\6\2\2\u04b6\u00ef\3\2\2\2\u04b7\u04b8")
        buf.write(u"\7P\2\2\u04b8\u04b9\7\5\2\2\u04b9\u04ba\5\u00aaV\2\u04ba")
        buf.write(u"\u04bb\7\6\2\2\u04bb\u00f1\3\2\2\2\u04bc\u04bd\7Q\2\2")
        buf.write(u"\u04bd\u04be\7\5\2\2\u04be\u04bf\5\u00acW\2\u04bf\u04c0")
        buf.write(u"\7\6\2\2\u04c0\u00f3\3\2\2\2\u04c1\u04c2\7R\2\2\u04c2")
        buf.write(u"\u04c3\7\5\2\2\u04c3\u04c4\5\u00acW\2\u04c4\u04c5\7\6")
        buf.write(u"\2\2\u04c5\u00f5\3\2\2\2\u04c6\u04c7\7S\2\2\u04c7\u04c8")
        buf.write(u"\7\5\2\2\u04c8\u04c9\5\u00acW\2\u04c9\u04ca\7\6\2\2\u04ca")
        buf.write(u"\u00f7\3\2\2\2\u04cb\u04cc\7T\2\2\u04cc\u04cd\7\5\2\2")
        buf.write(u"\u04cd\u04ce\5\u00acW\2\u04ce\u04cf\7\6\2\2\u04cf\u00f9")
        buf.write(u"\3\2\2\2\u04d0\u04d1\7U\2\2\u04d1\u04d2\7\5\2\2\u04d2")
        buf.write(u"\u04d3\7r\2\2\u04d3\u04d4\7\6\2\2\u04d4\u00fb\3\2\2\2")
        buf.write(u"\u04d5\u04d6\7V\2\2\u04d6\u04d7\7\5\2\2\u04d7\u04d8\7")
        buf.write(u"q\2\2\u04d8\u04d9\7\6\2\2\u04d9\u00fd\3\2\2\2\u04da\u04db")
        buf.write(u"\7W\2\2\u04db\u04dc\7\5\2\2\u04dc\u04dd\7r\2\2\u04dd")
        buf.write(u"\u04de\7\6\2\2\u04de\u00ff\3\2\2\2\u04df\u04e0\7X\2\2")
        buf.write(u"\u04e0\u04e1\7\5\2\2\u04e1\u04e2\7p\2\2\u04e2\u04e3\7")
        buf.write(u"\6\2\2\u04e3\u0101\3\2\2\2\u04e4\u04e5\7Y\2\2\u04e5\u04e6")
        buf.write(u"\7\5\2\2\u04e6\u04e7\7p\2\2\u04e7\u04e8\7\6\2\2\u04e8")
        buf.write(u"\u0103\3\2\2\2\u04e9\u04ea\7Z\2\2\u04ea\u04eb\7\5\2\2")
        buf.write(u"\u04eb\u04ec\5\u0126\u0094\2\u04ec\u04ed\7\6\2\2\u04ed")
        buf.write(u"\u0105\3\2\2\2\u04ee\u04ef\7[\2\2\u04ef\u04f0\7\5\2\2")
        buf.write(u"\u04f0\u04f1\7p\2\2\u04f1\u04f2\7\6\2\2\u04f2\u0107\3")
        buf.write(u"\2\2\2\u04f3\u04f4\7\\\2\2\u04f4\u04f5\7\5\2\2\u04f5")
        buf.write(u"\u04f6\7p\2\2\u04f6\u04f7\7\6\2\2\u04f7\u0109\3\2\2\2")
        buf.write(u"\u04f8\u04f9\7]\2\2\u04f9\u04fa\7\5\2\2\u04fa\u04fe\7")
        buf.write(u"\3\2\2\u04fb\u04fd\5\u0114\u008b\2\u04fc\u04fb\3\2\2")
        buf.write(u"\2\u04fd\u0500\3\2\2\2\u04fe\u04fc\3\2\2\2\u04fe\u04ff")
        buf.write(u"\3\2\2\2\u04ff\u0501\3\2\2\2\u0500\u04fe\3\2\2\2\u0501")
        buf.write(u"\u0502\7\4\2\2\u0502\u0503\7\6\2\2\u0503\u010b\3\2\2")
        buf.write(u"\2\u0504\u0505\7^\2\2\u0505\u0506\7\5\2\2\u0506\u0507")
        buf.write(u"\t\2\2\2\u0507\u0508\7\6\2\2\u0508\u010d\3\2\2\2\u0509")
        buf.write(u"\u050a\7_\2\2\u050a\u050b\7\5\2\2\u050b\u050c\7r\2\2")
        buf.write(u"\u050c\u050d\7\6\2\2\u050d\u010f\3\2\2\2\u050e\u0510")
        buf.write(u"\5\u0112\u008a\2\u050f\u050e\3\2\2\2\u0510\u0513\3\2")
        buf.write(u"\2\2\u0511\u050f\3\2\2\2\u0511\u0512\3\2\2\2\u0512\u0111")
        buf.write(u"\3\2\2\2\u0513\u0511\3\2\2\2\u0514\u0515\7\3\2\2\u0515")
        buf.write(u"\u0516\7`\2\2\u0516\u0517\7\5\2\2\u0517\u0518\7p\2\2")
        buf.write(u"\u0518\u0519\7\6\2\2\u0519\u051a\7a\2\2\u051a\u051b\7")
        buf.write(u"\5\2\2\u051b\u051c\7p\2\2\u051c\u051d\7\6\2\2\u051d\u051e")
        buf.write(u"\7\4\2\2\u051e\u051f\7/\2\2\u051f\u0113\3\2\2\2\u0520")
        buf.write(u"\u0521\5\u0126\u0094\2\u0521\u0522\7\5\2\2\u0522\u0523")
        buf.write(u"\5\u0126\u0094\2\u0523\u0524\7\6\2\2\u0524\u053b\3\2")
        buf.write(u"\2\2\u0525\u0526\5\u0126\u0094\2\u0526\u0527\7\5\2\2")
        buf.write(u"\u0527\u0528\7\3\2\2\u0528\u0529\5\u0114\u008b\2\u0529")
        buf.write(u"\u052a\7\4\2\2\u052a\u052b\7\6\2\2\u052b\u053b\3\2\2")
        buf.write(u"\2\u052c\u052d\5\u0126\u0094\2\u052d\u052e\7\5\2\2\u052e")
        buf.write(u"\u0534\7.\2\2\u052f\u0530\5\u0126\u0094\2\u0530\u0531")
        buf.write(u"\7/\2\2\u0531\u0533\3\2\2\2\u0532\u052f\3\2\2\2\u0533")
        buf.write(u"\u0536\3\2\2\2\u0534\u0532\3\2\2\2\u0534\u0535\3\2\2")
        buf.write(u"\2\u0535\u0537\3\2\2\2\u0536\u0534\3\2\2\2\u0537\u0538")
        buf.write(u"\7\60\2\2\u0538\u0539\7\6\2\2\u0539\u053b\3\2\2\2\u053a")
        buf.write(u"\u0520\3\2\2\2\u053a\u0525\3\2\2\2\u053a\u052c\3\2\2")
        buf.write(u"\2\u053b\u0115\3\2\2\2\u053c\u053d\7b\2\2\u053d\u053e")
        buf.write(u"\7\5\2\2\u053e\u053f\5\u00aaV\2\u053f\u0540\7\6\2\2\u0540")
        buf.write(u"\u0117\3\2\2\2\u0541\u0542\7c\2\2\u0542\u0543\7\5\2\2")
        buf.write(u"\u0543\u0544\7r\2\2\u0544\u0545\7\6\2\2\u0545\u0119\3")
        buf.write(u"\2\2\2\u0546\u0547\7d\2\2\u0547\u0548\7\5\2\2\u0548\u0549")
        buf.write(u"\t\2\2\2\u0549\u054a\7\6\2\2\u054a\u011b\3\2\2\2\u054b")
        buf.write(u"\u054c\7e\2\2\u054c\u054d\7\5\2\2\u054d\u0551\7\3\2\2")
        buf.write(u"\u054e\u0550\5\u0114\u008b\2\u054f\u054e\3\2\2\2\u0550")
        buf.write(u"\u0553\3\2\2\2\u0551\u054f\3\2\2\2\u0551\u0552\3\2\2")
        buf.write(u"\2\u0552\u0554\3\2\2\2\u0553\u0551\3\2\2\2\u0554\u0555")
        buf.write(u"\7\4\2\2\u0555\u0556\7\6\2\2\u0556\u011d\3\2\2\2\u0557")
        buf.write(u"\u0558\7f\2\2\u0558\u0559\7\5\2\2\u0559\u055d\7\3\2\2")
        buf.write(u"\u055a\u055c\5\u0114\u008b\2\u055b\u055a\3\2\2\2\u055c")
        buf.write(u"\u055f\3\2\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2")
        buf.write(u"\2\u055e\u0560\3\2\2\2\u055f\u055d\3\2\2\2\u0560\u0561")
        buf.write(u"\7\4\2\2\u0561\u0562\7\6\2\2\u0562\u011f\3\2\2\2\u0563")
        buf.write(u"\u0564\7g\2\2\u0564\u0565\7\5\2\2\u0565\u0566\7p\2\2")
        buf.write(u"\u0566\u0567\7\6\2\2\u0567\u0121\3\2\2\2\u0568\u0569")
        buf.write(u"\7h\2\2\u0569\u056a\7\5\2\2\u056a\u056b\7r\2\2\u056b")
        buf.write(u"\u056c\7\6\2\2\u056c\u0123\3\2\2\2\u056d\u056e\7i\2\2")
        buf.write(u"\u056e\u056f\7\5\2\2\u056f\u0570\5\u0126\u0094\2\u0570")
        buf.write(u"\u0571\7\6\2\2\u0571\u0125\3\2\2\2\u0572\u0573\t\3\2")
        buf.write(u"\2\u0573\u0127\3\2\2\2V\u0146\u014a\u014d\u0153\u0156")
        buf.write(u"\u015a\u015d\u0160\u0164\u0167\u016c\u0179\u017e\u0183")
        buf.write(u"\u0188\u018d\u0192\u0197\u019c\u01a1\u01a6\u01ab\u01b0")
        buf.write(u"\u01b5\u01ba\u01bf\u01c4\u01c9\u01ce\u01d3\u01e7\u0200")
        buf.write(u"\u020b\u020e\u0211\u0214\u0217\u021a\u021d\u0220\u0223")
        buf.write(u"\u0226\u023b\u023e\u0241\u0245\u0248\u0261\u0275\u0279")
        buf.write(u"\u029c\u02a0\u02a3\u02aa\u02be\u02c1\u02ce\u02d9\u02e7")
        buf.write(u"\u03c0\u03cb\u03d5\u0410\u0413\u0416\u0419\u041d\u0420")
        buf.write(u"\u0423\u044c\u0456\u0459\u045c\u045f\u0462\u0465\u0468")
        buf.write(u"\u04b0\u04fe\u0511\u0534\u053a\u0551\u055d")
        return buf.getvalue()


class PBXProjParser ( Parser ):

    grammarFileName = "PBXProj.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'{'", u"'}'", u"'='", u"';'", u"'PBXAggregateTarget'", 
                     u"'PBXBuildFile'", u"'PBXContainerItemProxy'", u"'PBXCopyFilesBuildPhase'", 
                     u"'PBXFileReference'", u"'PBXFrameworksBuildPhase'", 
                     u"'PBXGroup'", u"'PBXHeadersBuildPhase'", u"'PBXNativeTarget'", 
                     u"'PBXProject'", u"'PBXReferenceProxy'", u"'PBXResourcesBuildPhase'", 
                     u"'PBXShellScriptBuildPhase'", u"'PBXSourcesBuildPhase'", 
                     u"'PBXTargetDependency'", u"'PBXVariantGroup'", u"'XCBuildConfiguration'", 
                     u"'XCConfigurationList'", u"'XCVersionGroup'", u"'fileRef'", 
                     u"'containerPortal'", u"'proxyType'", u"'remoteGlobalIDString'", 
                     u"'remoteInfo'", u"'fileEncoding'", u"'explicitFileType'", 
                     u"'lastKnownFileType'", u"'includeInIndex'", u"'indentWidth'", 
                     u"'tabWidth'", u"'usesTabs'", u"'children'", u"'productInstallPath'", 
                     u"'name'", u"'path'", u"'sourceTree'", u"'buildActionMask'", 
                     u"'files'", u"'runOnlyForDeploymentPostprocessing'", 
                     u"'('", u"','", u"')'", u"'buildConfigurationList'", 
                     u"'buildPhases'", u"'buildRules'", u"'dependencies'", 
                     u"'productName'", u"'productReference'", u"'productType'", 
                     u"'lineEnding'", u"'xcLanguageSpecificationIdentifier'", 
                     u"'plistStructureDefinitionIdentifier'", u"'attributes'", 
                     u"'LastSwiftMigration'", u"'DefaultBuildSystemTypeForWorkspace'", 
                     u"'LastSwiftUpdateCheck'", u"'LastUpgradeCheck'", u"'LastTestingUpgradeCheck'", 
                     u"'ORGANIZATIONNAME'", u"'TargetAttributes'", u"'CreatedOnToolsVersion'", 
                     u"'TestTargetID'", u"'DevelopmentTeam'", u"'ProvisioningStyle'", 
                     u"'compatibilityVersion'", u"'developmentRegion'", 
                     u"'hasScannedForEncodings'", u"'knownRegions'", u"'mainGroup'", 
                     u"'productRefGroup'", u"'projectDirPath'", u"'projectReferences'", 
                     u"'projectRoot'", u"'targets'", u"'inputFileListPaths'", 
                     u"'inputPaths'", u"'outputFileListPaths'", u"'outputPaths'", 
                     u"'shellPath'", u"'shellScript'", u"'showEnvVarsInLog'", 
                     u"'target'", u"'targetProxy'", u"'fileType'", u"'remoteRef'", 
                     u"'baseConfigurationReference'", u"'buildSettings'", 
                     u"'dstPath'", u"'dstSubfolderSpec'", u"'ProductGroup'", 
                     u"'ProjectRef'", u"'buildConfigurations'", u"'defaultConfigurationIsVisible'", 
                     u"'defaultConfigurationName'", u"'settings'", u"'SystemCapabilities'", 
                     u"'currentVersion'", u"'versionGroupType'", u"'CLASSPREFIX'", 
                     u"'archiveVersion'", u"'classes'", u"'isa'", u"'objectVersion'", 
                     u"'objects'", u"'rootObject'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"ARCHIVE_VERSION", u"CLASSES", u"ISA", u"OBJECT_VERSION", 
                      u"OBJECTS", u"ROOT_OBJECT", u"REFERENCE", u"QUOTED_STRING", 
                      u"NON_QUOTED_STRING", u"VARIABLE", u"WS", u"COMMENT", 
                      u"LINE_COMMENT" ]

    RULE_start = 0
    RULE_root_element = 1
    RULE_archive_version = 2
    RULE_classes = 3
    RULE_object_version = 4
    RULE_objects = 5
    RULE_root_object = 6
    RULE_pbx_aggregate_target_section = 7
    RULE_pbx_build_file_section = 8
    RULE_pbx_container_item_proxy_section = 9
    RULE_pbx_copy_files_build_phase_section = 10
    RULE_pbx_file_reference_section = 11
    RULE_pbx_frameworks_build_phase_section = 12
    RULE_pbx_group_section = 13
    RULE_pbx_headers_build_phase_section = 14
    RULE_pbx_native_target_section = 15
    RULE_pbx_project_section = 16
    RULE_pbx_reference_proxy_section = 17
    RULE_pbx_resources_build_phase_section = 18
    RULE_pbx_shell_script_build_phase_section = 19
    RULE_pbx_sources_build_phase_section = 20
    RULE_pbx_target_dependency_section = 21
    RULE_pbx_variant_group_section = 22
    RULE_xc_build_configuration_section = 23
    RULE_xc_configuration_list_section = 24
    RULE_xc_version_group_section = 25
    RULE_pbx_aggregate_target = 26
    RULE_pbx_build_file = 27
    RULE_pbx_container_item_proxy = 28
    RULE_pbx_copy_files_build_phase = 29
    RULE_pbx_file_reference = 30
    RULE_pbx_frameworks_build_phase = 31
    RULE_pbx_group = 32
    RULE_pbx_headers_build_phase = 33
    RULE_pbx_native_target = 34
    RULE_pbx_project = 35
    RULE_pbx_reference_proxy = 36
    RULE_pbx_resources_build_phase = 37
    RULE_pbx_shell_script_build_phase = 38
    RULE_pbx_sources_build_phase = 39
    RULE_pbx_target_dependency = 40
    RULE_pbx_variant_group = 41
    RULE_xc_build_configuration = 42
    RULE_xc_configuration_list = 43
    RULE_xc_version_group = 44
    RULE_isa_pbx_aggregate_target = 45
    RULE_isa_pbx_build_file = 46
    RULE_isa_pbx_container_item_proxy = 47
    RULE_isa_pbx_copy_files_build_phase = 48
    RULE_isa_pbx_file_reference = 49
    RULE_isa_pbx_frameworks_build_phase = 50
    RULE_isa_pbx_group = 51
    RULE_isa_pbx_header_build_phase = 52
    RULE_isa_pbx_native_target = 53
    RULE_isa_pbx_project = 54
    RULE_isa_pbx_reference_proxy = 55
    RULE_isa_pbx_resources_build_phase = 56
    RULE_isa_pbx_shell_script_build_phase = 57
    RULE_isa_pbx_sources_build_phase = 58
    RULE_isa_pbx_target_dependency = 59
    RULE_isa_pbx_variant_group = 60
    RULE_isa_xc_build_configuration = 61
    RULE_isa_xc_configuration_list = 62
    RULE_isa_xc_version_group = 63
    RULE_file_ref = 64
    RULE_container_portal = 65
    RULE_proxy_type = 66
    RULE_remote_global_id_string = 67
    RULE_remote_info = 68
    RULE_file_encoding = 69
    RULE_explicit_file_type = 70
    RULE_last_known_file_type = 71
    RULE_include_in_index = 72
    RULE_indent_width = 73
    RULE_tab_width = 74
    RULE_uses_tabs = 75
    RULE_children = 76
    RULE_product_install_path = 77
    RULE_name = 78
    RULE_path = 79
    RULE_source_tree = 80
    RULE_build_action_mask = 81
    RULE_files = 82
    RULE_run_only_for_deployment_postprocessing = 83
    RULE_reference_list = 84
    RULE_any_string_list = 85
    RULE_non_quoted_strings_list = 86
    RULE_build_configuration_list = 87
    RULE_build_phases = 88
    RULE_build_rules = 89
    RULE_dependencies = 90
    RULE_product_name = 91
    RULE_product_reference = 92
    RULE_product_type = 93
    RULE_line_ending = 94
    RULE_xc_language_specification_identifier = 95
    RULE_plist_structure_definition_identifier = 96
    RULE_attributes = 97
    RULE_last_swift_migration = 98
    RULE_default_build_system_type_for_workspace = 99
    RULE_last_swift_update_check = 100
    RULE_last_upgrade_check = 101
    RULE_last_testing_upgrade_check = 102
    RULE_organization_name = 103
    RULE_target_attributes = 104
    RULE_target_attribute = 105
    RULE_created_on_tools_version = 106
    RULE_test_target_id = 107
    RULE_development_team = 108
    RULE_provisioning_style = 109
    RULE_compatibility_version = 110
    RULE_development_region = 111
    RULE_has_scanned_for_encodings = 112
    RULE_known_regions = 113
    RULE_main_group = 114
    RULE_product_ref_group = 115
    RULE_project_dir_path = 116
    RULE_project_references = 117
    RULE_project_root = 118
    RULE_targets = 119
    RULE_input_file_list_paths = 120
    RULE_input_paths = 121
    RULE_output_file_list_paths = 122
    RULE_output_paths = 123
    RULE_shell_path = 124
    RULE_shell_script = 125
    RULE_show_env_vars_in_log = 126
    RULE_target = 127
    RULE_target_proxy = 128
    RULE_file_type = 129
    RULE_remote_ref = 130
    RULE_base_configuration_reference = 131
    RULE_build_settings = 132
    RULE_dst_path = 133
    RULE_dst_subfolder_spec = 134
    RULE_project_references_list = 135
    RULE_project_references_list_element = 136
    RULE_key_value = 137
    RULE_build_configurations = 138
    RULE_default_configuration_is_visible = 139
    RULE_default_configuration_name = 140
    RULE_settings = 141
    RULE_system_capabilities = 142
    RULE_current_version = 143
    RULE_version_group_type = 144
    RULE_class_prefix = 145
    RULE_any_string = 146

    ruleNames =  [ u"start", u"root_element", u"archive_version", u"classes", 
                   u"object_version", u"objects", u"root_object", u"pbx_aggregate_target_section", 
                   u"pbx_build_file_section", u"pbx_container_item_proxy_section", 
                   u"pbx_copy_files_build_phase_section", u"pbx_file_reference_section", 
                   u"pbx_frameworks_build_phase_section", u"pbx_group_section", 
                   u"pbx_headers_build_phase_section", u"pbx_native_target_section", 
                   u"pbx_project_section", u"pbx_reference_proxy_section", 
                   u"pbx_resources_build_phase_section", u"pbx_shell_script_build_phase_section", 
                   u"pbx_sources_build_phase_section", u"pbx_target_dependency_section", 
                   u"pbx_variant_group_section", u"xc_build_configuration_section", 
                   u"xc_configuration_list_section", u"xc_version_group_section", 
                   u"pbx_aggregate_target", u"pbx_build_file", u"pbx_container_item_proxy", 
                   u"pbx_copy_files_build_phase", u"pbx_file_reference", 
                   u"pbx_frameworks_build_phase", u"pbx_group", u"pbx_headers_build_phase", 
                   u"pbx_native_target", u"pbx_project", u"pbx_reference_proxy", 
                   u"pbx_resources_build_phase", u"pbx_shell_script_build_phase", 
                   u"pbx_sources_build_phase", u"pbx_target_dependency", 
                   u"pbx_variant_group", u"xc_build_configuration", u"xc_configuration_list", 
                   u"xc_version_group", u"isa_pbx_aggregate_target", u"isa_pbx_build_file", 
                   u"isa_pbx_container_item_proxy", u"isa_pbx_copy_files_build_phase", 
                   u"isa_pbx_file_reference", u"isa_pbx_frameworks_build_phase", 
                   u"isa_pbx_group", u"isa_pbx_header_build_phase", u"isa_pbx_native_target", 
                   u"isa_pbx_project", u"isa_pbx_reference_proxy", u"isa_pbx_resources_build_phase", 
                   u"isa_pbx_shell_script_build_phase", u"isa_pbx_sources_build_phase", 
                   u"isa_pbx_target_dependency", u"isa_pbx_variant_group", 
                   u"isa_xc_build_configuration", u"isa_xc_configuration_list", 
                   u"isa_xc_version_group", u"file_ref", u"container_portal", 
                   u"proxy_type", u"remote_global_id_string", u"remote_info", 
                   u"file_encoding", u"explicit_file_type", u"last_known_file_type", 
                   u"include_in_index", u"indent_width", u"tab_width", u"uses_tabs", 
                   u"children", u"product_install_path", u"name", u"path", 
                   u"source_tree", u"build_action_mask", u"files", u"run_only_for_deployment_postprocessing", 
                   u"reference_list", u"any_string_list", u"non_quoted_strings_list", 
                   u"build_configuration_list", u"build_phases", u"build_rules", 
                   u"dependencies", u"product_name", u"product_reference", 
                   u"product_type", u"line_ending", u"xc_language_specification_identifier", 
                   u"plist_structure_definition_identifier", u"attributes", 
                   u"last_swift_migration", u"default_build_system_type_for_workspace", 
                   u"last_swift_update_check", u"last_upgrade_check", u"last_testing_upgrade_check", 
                   u"organization_name", u"target_attributes", u"target_attribute", 
                   u"created_on_tools_version", u"test_target_id", u"development_team", 
                   u"provisioning_style", u"compatibility_version", u"development_region", 
                   u"has_scanned_for_encodings", u"known_regions", u"main_group", 
                   u"product_ref_group", u"project_dir_path", u"project_references", 
                   u"project_root", u"targets", u"input_file_list_paths", 
                   u"input_paths", u"output_file_list_paths", u"output_paths", 
                   u"shell_path", u"shell_script", u"show_env_vars_in_log", 
                   u"target", u"target_proxy", u"file_type", u"remote_ref", 
                   u"base_configuration_reference", u"build_settings", u"dst_path", 
                   u"dst_subfolder_spec", u"project_references_list", u"project_references_list_element", 
                   u"key_value", u"build_configurations", u"default_configuration_is_visible", 
                   u"default_configuration_name", u"settings", u"system_capabilities", 
                   u"current_version", u"version_group_type", u"class_prefix", 
                   u"any_string" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    T__14=15
    T__15=16
    T__16=17
    T__17=18
    T__18=19
    T__19=20
    T__20=21
    T__21=22
    T__22=23
    T__23=24
    T__24=25
    T__25=26
    T__26=27
    T__27=28
    T__28=29
    T__29=30
    T__30=31
    T__31=32
    T__32=33
    T__33=34
    T__34=35
    T__35=36
    T__36=37
    T__37=38
    T__38=39
    T__39=40
    T__40=41
    T__41=42
    T__42=43
    T__43=44
    T__44=45
    T__45=46
    T__46=47
    T__47=48
    T__48=49
    T__49=50
    T__50=51
    T__51=52
    T__52=53
    T__53=54
    T__54=55
    T__55=56
    T__56=57
    T__57=58
    T__58=59
    T__59=60
    T__60=61
    T__61=62
    T__62=63
    T__63=64
    T__64=65
    T__65=66
    T__66=67
    T__67=68
    T__68=69
    T__69=70
    T__70=71
    T__71=72
    T__72=73
    T__73=74
    T__74=75
    T__75=76
    T__76=77
    T__77=78
    T__78=79
    T__79=80
    T__80=81
    T__81=82
    T__82=83
    T__83=84
    T__84=85
    T__85=86
    T__86=87
    T__87=88
    T__88=89
    T__89=90
    T__90=91
    T__91=92
    T__92=93
    T__93=94
    T__94=95
    T__95=96
    T__96=97
    T__97=98
    T__98=99
    T__99=100
    T__100=101
    T__101=102
    T__102=103
    ARCHIVE_VERSION=104
    CLASSES=105
    ISA=106
    OBJECT_VERSION=107
    OBJECTS=108
    ROOT_OBJECT=109
    REFERENCE=110
    QUOTED_STRING=111
    NON_QUOTED_STRING=112
    VARIABLE=113
    WS=114
    COMMENT=115
    LINE_COMMENT=116

    def __init__(self, input):
        super(PBXProjParser, self).__init__(input)
        self.checkVersion("4.6")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class StartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.StartContext, self).__init__(parent, invokingState)
            self.parser = parser

        def root_element(self):
            return self.getTypedRuleContext(PBXProjParser.Root_elementContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_start

        def enterRule(self, listener):
            if hasattr(listener, "enterStart"):
                listener.enterStart(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStart"):
                listener.exitStart(self)




    def start(self):

        localctx = PBXProjParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_start)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.root_element()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Root_elementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Root_elementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def archive_version(self):
            return self.getTypedRuleContext(PBXProjParser.Archive_versionContext,0)


        def classes(self):
            return self.getTypedRuleContext(PBXProjParser.ClassesContext,0)


        def object_version(self):
            return self.getTypedRuleContext(PBXProjParser.Object_versionContext,0)


        def objects(self):
            return self.getTypedRuleContext(PBXProjParser.ObjectsContext,0)


        def root_object(self):
            return self.getTypedRuleContext(PBXProjParser.Root_objectContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_root_element

        def enterRule(self, listener):
            if hasattr(listener, "enterRoot_element"):
                listener.enterRoot_element(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoot_element"):
                listener.exitRoot_element(self)




    def root_element(self):

        localctx = PBXProjParser.Root_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_root_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(PBXProjParser.T__0)
            self.state = 297
            self.archive_version()
            self.state = 298
            self.classes()
            self.state = 299
            self.object_version()
            self.state = 300
            self.objects()
            self.state = 301
            self.root_object()
            self.state = 302
            self.match(PBXProjParser.T__1)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Archive_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Archive_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE_VERSION(self):
            return self.getToken(PBXProjParser.ARCHIVE_VERSION, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_archive_version

        def enterRule(self, listener):
            if hasattr(listener, "enterArchive_version"):
                listener.enterArchive_version(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitArchive_version"):
                listener.exitArchive_version(self)




    def archive_version(self):

        localctx = PBXProjParser.Archive_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_archive_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 304
            self.match(PBXProjParser.ARCHIVE_VERSION)
            self.state = 305
            self.match(PBXProjParser.T__2)
            self.state = 306
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 307
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ClassesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.ClassesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CLASSES(self):
            return self.getToken(PBXProjParser.CLASSES, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_classes

        def enterRule(self, listener):
            if hasattr(listener, "enterClasses"):
                listener.enterClasses(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClasses"):
                listener.exitClasses(self)




    def classes(self):

        localctx = PBXProjParser.ClassesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_classes)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(PBXProjParser.CLASSES)
            self.state = 310
            self.match(PBXProjParser.T__2)
            self.state = 311
            self.match(PBXProjParser.T__0)
            self.state = 312
            self.match(PBXProjParser.T__1)
            self.state = 313
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Object_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Object_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OBJECT_VERSION(self):
            return self.getToken(PBXProjParser.OBJECT_VERSION, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_object_version

        def enterRule(self, listener):
            if hasattr(listener, "enterObject_version"):
                listener.enterObject_version(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObject_version"):
                listener.exitObject_version(self)




    def object_version(self):

        localctx = PBXProjParser.Object_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_object_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(PBXProjParser.OBJECT_VERSION)
            self.state = 316
            self.match(PBXProjParser.T__2)
            self.state = 317
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 318
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ObjectsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.ObjectsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def OBJECTS(self):
            return self.getToken(PBXProjParser.OBJECTS, 0)

        def pbx_build_file_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_build_file_sectionContext,0)


        def pbx_file_reference_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_file_reference_sectionContext,0)


        def pbx_frameworks_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phase_sectionContext,0)


        def pbx_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_group_sectionContext,0)


        def pbx_project_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_project_sectionContext,0)


        def pbx_sources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phase_sectionContext,0)


        def xc_build_configuration_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_build_configuration_sectionContext,0)


        def xc_configuration_list_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_configuration_list_sectionContext,0)


        def pbx_aggregate_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_target_sectionContext,0)


        def pbx_container_item_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxy_sectionContext,0)


        def pbx_copy_files_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phase_sectionContext,0)


        def pbx_headers_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phase_sectionContext,0)


        def pbx_native_target_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_native_target_sectionContext,0)


        def pbx_reference_proxy_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxy_sectionContext,0)


        def pbx_resources_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phase_sectionContext,0)


        def pbx_shell_script_build_phase_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phase_sectionContext,0)


        def pbx_target_dependency_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependency_sectionContext,0)


        def pbx_variant_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Pbx_variant_group_sectionContext,0)


        def xc_version_group_section(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_version_group_sectionContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_objects

        def enterRule(self, listener):
            if hasattr(listener, "enterObjects"):
                listener.enterObjects(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitObjects"):
                listener.exitObjects(self)




    def objects(self):

        localctx = PBXProjParser.ObjectsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_objects)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 320
            self.match(PBXProjParser.OBJECTS)
            self.state = 321
            self.match(PBXProjParser.T__2)
            self.state = 322
            self.match(PBXProjParser.T__0)
            self.state = 324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
            if la_ == 1:
                self.state = 323
                self.pbx_aggregate_target_section()


            self.state = 326
            self.pbx_build_file_section()
            self.state = 328
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 327
                self.pbx_container_item_proxy_section()


            self.state = 331
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 330
                self.pbx_copy_files_build_phase_section()


            self.state = 333
            self.pbx_file_reference_section()
            self.state = 334
            self.pbx_frameworks_build_phase_section()
            self.state = 335
            self.pbx_group_section()
            self.state = 337
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 336
                self.pbx_headers_build_phase_section()


            self.state = 340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.state = 339
                self.pbx_native_target_section()


            self.state = 342
            self.pbx_project_section()
            self.state = 344
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 343
                self.pbx_reference_proxy_section()


            self.state = 347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 346
                self.pbx_resources_build_phase_section()


            self.state = 350
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
            if la_ == 1:
                self.state = 349
                self.pbx_shell_script_build_phase_section()


            self.state = 352
            self.pbx_sources_build_phase_section()
            self.state = 354
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.state = 353
                self.pbx_target_dependency_section()


            self.state = 357
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.state = 356
                self.pbx_variant_group_section()


            self.state = 359
            self.xc_build_configuration_section()
            self.state = 360
            self.xc_configuration_list_section()
            self.state = 362
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.REFERENCE:
                self.state = 361
                self.xc_version_group_section()


            self.state = 364
            self.match(PBXProjParser.T__1)
            self.state = 365
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Root_objectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Root_objectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ROOT_OBJECT(self):
            return self.getToken(PBXProjParser.ROOT_OBJECT, 0)

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_root_object

        def enterRule(self, listener):
            if hasattr(listener, "enterRoot_object"):
                listener.enterRoot_object(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoot_object"):
                listener.exitRoot_object(self)




    def root_object(self):

        localctx = PBXProjParser.Root_objectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_root_object)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 367
            self.match(PBXProjParser.ROOT_OBJECT)
            self.state = 368
            self.match(PBXProjParser.T__2)
            self.state = 369
            self.match(PBXProjParser.REFERENCE)
            self.state = 370
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_aggregate_target_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_aggregate_target_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_aggregate_target(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_aggregate_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_aggregate_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_aggregate_target_section"):
                listener.enterPbx_aggregate_target_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_aggregate_target_section"):
                listener.exitPbx_aggregate_target_section(self)




    def pbx_aggregate_target_section(self):

        localctx = PBXProjParser.Pbx_aggregate_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_pbx_aggregate_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 372
                    self.pbx_aggregate_target()

                else:
                    raise NoViableAltException(self)
                self.state = 375 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_build_file_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_build_file_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_build_file(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_build_fileContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_build_fileContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_build_file_section"):
                listener.enterPbx_build_file_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_build_file_section"):
                listener.exitPbx_build_file_section(self)




    def pbx_build_file_section(self):

        localctx = PBXProjParser.Pbx_build_file_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_pbx_build_file_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 378 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 377
                    self.pbx_build_file()

                else:
                    raise NoViableAltException(self)
                self.state = 380 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_container_item_proxy_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_container_item_proxy_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_container_item_proxy(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_container_item_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_container_item_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_container_item_proxy_section"):
                listener.enterPbx_container_item_proxy_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_container_item_proxy_section"):
                listener.exitPbx_container_item_proxy_section(self)




    def pbx_container_item_proxy_section(self):

        localctx = PBXProjParser.Pbx_container_item_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_pbx_container_item_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 382
                    self.pbx_container_item_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 385 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_copy_files_build_phase_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_copy_files_build_phase_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_copy_files_build_phase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_copy_files_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_copy_files_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_copy_files_build_phase_section"):
                listener.enterPbx_copy_files_build_phase_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_copy_files_build_phase_section"):
                listener.exitPbx_copy_files_build_phase_section(self)




    def pbx_copy_files_build_phase_section(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_pbx_copy_files_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 388 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 387
                    self.pbx_copy_files_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 390 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_file_reference_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_file_reference_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_file_reference(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_file_referenceContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_file_referenceContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_file_reference_section"):
                listener.enterPbx_file_reference_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_file_reference_section"):
                listener.exitPbx_file_reference_section(self)




    def pbx_file_reference_section(self):

        localctx = PBXProjParser.Pbx_file_reference_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_pbx_file_reference_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 392
                    self.pbx_file_reference()

                else:
                    raise NoViableAltException(self)
                self.state = 395 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_frameworks_build_phase_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_frameworks_build_phase_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_frameworks_build_phase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_frameworks_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_frameworks_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_frameworks_build_phase_section"):
                listener.enterPbx_frameworks_build_phase_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_frameworks_build_phase_section"):
                listener.exitPbx_frameworks_build_phase_section(self)




    def pbx_frameworks_build_phase_section(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_pbx_frameworks_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 397
                    self.pbx_frameworks_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 400 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_group_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_group_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_group(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_group_section"):
                listener.enterPbx_group_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_group_section"):
                listener.exitPbx_group_section(self)




    def pbx_group_section(self):

        localctx = PBXProjParser.Pbx_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_pbx_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 402
                    self.pbx_group()

                else:
                    raise NoViableAltException(self)
                self.state = 405 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_headers_build_phase_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_headers_build_phase_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_headers_build_phase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_headers_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_headers_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_headers_build_phase_section"):
                listener.enterPbx_headers_build_phase_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_headers_build_phase_section"):
                listener.exitPbx_headers_build_phase_section(self)




    def pbx_headers_build_phase_section(self):

        localctx = PBXProjParser.Pbx_headers_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pbx_headers_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 407
                    self.pbx_headers_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 410 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_native_target_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_native_target_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_native_target(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_native_targetContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_native_targetContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_native_target_section"):
                listener.enterPbx_native_target_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_native_target_section"):
                listener.exitPbx_native_target_section(self)




    def pbx_native_target_section(self):

        localctx = PBXProjParser.Pbx_native_target_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pbx_native_target_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 412
                    self.pbx_native_target()

                else:
                    raise NoViableAltException(self)
                self.state = 415 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_project_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_project_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_project(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_projectContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_projectContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_project_section"):
                listener.enterPbx_project_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_project_section"):
                listener.exitPbx_project_section(self)




    def pbx_project_section(self):

        localctx = PBXProjParser.Pbx_project_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_pbx_project_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 417
                    self.pbx_project()

                else:
                    raise NoViableAltException(self)
                self.state = 420 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_reference_proxy_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_reference_proxy_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_reference_proxy(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_reference_proxyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_reference_proxyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_reference_proxy_section"):
                listener.enterPbx_reference_proxy_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_reference_proxy_section"):
                listener.exitPbx_reference_proxy_section(self)




    def pbx_reference_proxy_section(self):

        localctx = PBXProjParser.Pbx_reference_proxy_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pbx_reference_proxy_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 423 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 422
                    self.pbx_reference_proxy()

                else:
                    raise NoViableAltException(self)
                self.state = 425 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_resources_build_phase_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_resources_build_phase_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_resources_build_phase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_resources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_resources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_resources_build_phase_section"):
                listener.enterPbx_resources_build_phase_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_resources_build_phase_section"):
                listener.exitPbx_resources_build_phase_section(self)




    def pbx_resources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_resources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pbx_resources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 427
                    self.pbx_resources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 430 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_shell_script_build_phase_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_shell_script_build_phase_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_shell_script_build_phase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_shell_script_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_shell_script_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_shell_script_build_phase_section"):
                listener.enterPbx_shell_script_build_phase_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_shell_script_build_phase_section"):
                listener.exitPbx_shell_script_build_phase_section(self)




    def pbx_shell_script_build_phase_section(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pbx_shell_script_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 432
                    self.pbx_shell_script_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 435 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_sources_build_phase_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_sources_build_phase_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_sources_build_phase(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_sources_build_phaseContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_sources_build_phaseContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_sources_build_phase_section"):
                listener.enterPbx_sources_build_phase_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_sources_build_phase_section"):
                listener.exitPbx_sources_build_phase_section(self)




    def pbx_sources_build_phase_section(self):

        localctx = PBXProjParser.Pbx_sources_build_phase_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pbx_sources_build_phase_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 437
                    self.pbx_sources_build_phase()

                else:
                    raise NoViableAltException(self)
                self.state = 440 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_target_dependency_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_target_dependency_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_target_dependency(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_target_dependencyContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_target_dependencyContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_target_dependency_section"):
                listener.enterPbx_target_dependency_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_target_dependency_section"):
                listener.exitPbx_target_dependency_section(self)




    def pbx_target_dependency_section(self):

        localctx = PBXProjParser.Pbx_target_dependency_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pbx_target_dependency_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 442
                    self.pbx_target_dependency()

                else:
                    raise NoViableAltException(self)
                self.state = 445 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_variant_group_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_variant_group_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pbx_variant_group(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Pbx_variant_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Pbx_variant_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group_section

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_variant_group_section"):
                listener.enterPbx_variant_group_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_variant_group_section"):
                listener.exitPbx_variant_group_section(self)




    def pbx_variant_group_section(self):

        localctx = PBXProjParser.Pbx_variant_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pbx_variant_group_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 448 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 447
                    self.pbx_variant_group()

                else:
                    raise NoViableAltException(self)
                self.state = 450 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_build_configuration_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_build_configuration_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xc_build_configuration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_build_configurationContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_build_configurationContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration_section

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_build_configuration_section"):
                listener.enterXc_build_configuration_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_build_configuration_section"):
                listener.exitXc_build_configuration_section(self)




    def xc_build_configuration_section(self):

        localctx = PBXProjParser.Xc_build_configuration_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_xc_build_configuration_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 452
                    self.xc_build_configuration()

                else:
                    raise NoViableAltException(self)
                self.state = 455 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_configuration_list_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_configuration_list_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xc_configuration_list(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_configuration_listContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_configuration_listContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list_section

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_configuration_list_section"):
                listener.enterXc_configuration_list_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_configuration_list_section"):
                listener.exitXc_configuration_list_section(self)




    def xc_configuration_list_section(self):

        localctx = PBXProjParser.Xc_configuration_list_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_xc_configuration_list_section)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 457
                    self.xc_configuration_list()

                else:
                    raise NoViableAltException(self)
                self.state = 460 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_version_group_sectionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_version_group_sectionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def xc_version_group(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Xc_version_groupContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Xc_version_groupContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group_section

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_version_group_section"):
                listener.enterXc_version_group_section(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_version_group_section"):
                listener.exitXc_version_group_section(self)




    def xc_version_group_section(self):

        localctx = PBXProjParser.Xc_version_group_sectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_xc_version_group_section)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 463 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 462
                self.xc_version_group()
                self.state = 465 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==PBXProjParser.REFERENCE):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_aggregate_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_aggregate_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_aggregate_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_aggregate_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_aggregate_target

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_aggregate_target"):
                listener.enterPbx_aggregate_target(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_aggregate_target"):
                listener.exitPbx_aggregate_target(self)




    def pbx_aggregate_target(self):

        localctx = PBXProjParser.Pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(PBXProjParser.REFERENCE)
            self.state = 468
            self.match(PBXProjParser.T__2)
            self.state = 469
            self.match(PBXProjParser.T__0)
            self.state = 470
            self.isa_pbx_aggregate_target()
            self.state = 471
            self.build_configuration_list()
            self.state = 472
            self.build_phases()
            self.state = 473
            self.dependencies()
            self.state = 474
            self.name()
            self.state = 475
            self.product_name()
            self.state = 476
            self.match(PBXProjParser.T__1)
            self.state = 477
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_build_fileContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_build_fileContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_build_file(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_build_fileContext,0)


        def file_ref(self):
            return self.getTypedRuleContext(PBXProjParser.File_refContext,0)


        def settings(self):
            return self.getTypedRuleContext(PBXProjParser.SettingsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_build_file

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_build_file"):
                listener.enterPbx_build_file(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_build_file"):
                listener.exitPbx_build_file(self)




    def pbx_build_file(self):

        localctx = PBXProjParser.Pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_pbx_build_file)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(PBXProjParser.REFERENCE)
            self.state = 480
            self.match(PBXProjParser.T__2)
            self.state = 481
            self.match(PBXProjParser.T__0)
            self.state = 482
            self.isa_pbx_build_file()
            self.state = 483
            self.file_ref()
            self.state = 485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__98:
                self.state = 484
                self.settings()


            self.state = 487
            self.match(PBXProjParser.T__1)
            self.state = 488
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_container_item_proxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_container_item_proxyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_container_item_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_container_item_proxyContext,0)


        def container_portal(self):
            return self.getTypedRuleContext(PBXProjParser.Container_portalContext,0)


        def proxy_type(self):
            return self.getTypedRuleContext(PBXProjParser.Proxy_typeContext,0)


        def remote_global_id_string(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_global_id_stringContext,0)


        def remote_info(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_infoContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_container_item_proxy

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_container_item_proxy"):
                listener.enterPbx_container_item_proxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_container_item_proxy"):
                listener.exitPbx_container_item_proxy(self)




    def pbx_container_item_proxy(self):

        localctx = PBXProjParser.Pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            self.match(PBXProjParser.REFERENCE)
            self.state = 491
            self.match(PBXProjParser.T__2)
            self.state = 492
            self.match(PBXProjParser.T__0)
            self.state = 493
            self.isa_pbx_container_item_proxy()
            self.state = 494
            self.container_portal()
            self.state = 495
            self.proxy_type()
            self.state = 496
            self.remote_global_id_string()
            self.state = 497
            self.remote_info()
            self.state = 498
            self.match(PBXProjParser.T__1)
            self.state = 499
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_copy_files_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_copy_files_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_copy_files_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_copy_files_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def dst_path(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_pathContext,0)


        def dst_subfolder_spec(self):
            return self.getTypedRuleContext(PBXProjParser.Dst_subfolder_specContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_copy_files_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_copy_files_build_phase"):
                listener.enterPbx_copy_files_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_copy_files_build_phase"):
                listener.exitPbx_copy_files_build_phase(self)




    def pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_pbx_copy_files_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 501
            self.match(PBXProjParser.REFERENCE)
            self.state = 502
            self.match(PBXProjParser.T__2)
            self.state = 503
            self.match(PBXProjParser.T__0)
            self.state = 504
            self.isa_pbx_copy_files_build_phase()
            self.state = 505
            self.build_action_mask()
            self.state = 506
            self.dst_path()
            self.state = 507
            self.dst_subfolder_spec()
            self.state = 508
            self.files()
            self.state = 510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 509
                self.name()


            self.state = 512
            self.run_only_for_deployment_postprocessing()
            self.state = 513
            self.match(PBXProjParser.T__1)
            self.state = 514
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_file_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_file_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_file_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_file_referenceContext,0)


        def explicit_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Explicit_file_typeContext,0)


        def file_encoding(self):
            return self.getTypedRuleContext(PBXProjParser.File_encodingContext,0)


        def include_in_index(self):
            return self.getTypedRuleContext(PBXProjParser.Include_in_indexContext,0)


        def last_known_file_type(self):
            return self.getTypedRuleContext(PBXProjParser.Last_known_file_typeContext,0)


        def line_ending(self):
            return self.getTypedRuleContext(PBXProjParser.Line_endingContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def plist_structure_definition_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Plist_structure_definition_identifierContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def xc_language_specification_identifier(self):
            return self.getTypedRuleContext(PBXProjParser.Xc_language_specification_identifierContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_file_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_file_reference"):
                listener.enterPbx_file_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_file_reference"):
                listener.exitPbx_file_reference(self)




    def pbx_file_reference(self):

        localctx = PBXProjParser.Pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_pbx_file_reference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(PBXProjParser.REFERENCE)
            self.state = 517
            self.match(PBXProjParser.T__2)
            self.state = 518
            self.match(PBXProjParser.T__0)
            self.state = 519
            self.isa_pbx_file_reference()
            self.state = 521
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__29:
                self.state = 520
                self.explicit_file_type()


            self.state = 524
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__28:
                self.state = 523
                self.file_encoding()


            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__31:
                self.state = 526
                self.include_in_index()


            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__30:
                self.state = 529
                self.last_known_file_type()


            self.state = 533
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__53:
                self.state = 532
                self.line_ending()


            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 535
                self.name()


            self.state = 539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__38:
                self.state = 538
                self.path()


            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__55:
                self.state = 541
                self.plist_structure_definition_identifier()


            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__39:
                self.state = 544
                self.source_tree()


            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__54:
                self.state = 547
                self.xc_language_specification_identifier()


            self.state = 550
            self.match(PBXProjParser.T__1)
            self.state = 551
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_frameworks_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_frameworks_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_frameworks_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_frameworks_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_frameworks_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_frameworks_build_phase"):
                listener.enterPbx_frameworks_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_frameworks_build_phase"):
                listener.exitPbx_frameworks_build_phase(self)




    def pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 553
            self.match(PBXProjParser.REFERENCE)
            self.state = 554
            self.match(PBXProjParser.T__2)
            self.state = 555
            self.match(PBXProjParser.T__0)
            self.state = 556
            self.isa_pbx_frameworks_build_phase()
            self.state = 557
            self.build_action_mask()
            self.state = 558
            self.files()
            self.state = 559
            self.run_only_for_deployment_postprocessing()
            self.state = 560
            self.match(PBXProjParser.T__1)
            self.state = 561
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def indent_width(self):
            return self.getTypedRuleContext(PBXProjParser.Indent_widthContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def tab_width(self):
            return self.getTypedRuleContext(PBXProjParser.Tab_widthContext,0)


        def uses_tabs(self):
            return self.getTypedRuleContext(PBXProjParser.Uses_tabsContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_group

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_group"):
                listener.enterPbx_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_group"):
                listener.exitPbx_group(self)




    def pbx_group(self):

        localctx = PBXProjParser.Pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_pbx_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 563
            self.match(PBXProjParser.REFERENCE)
            self.state = 564
            self.match(PBXProjParser.T__2)
            self.state = 565
            self.match(PBXProjParser.T__0)
            self.state = 566
            self.isa_pbx_group()
            self.state = 567
            self.children()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__32:
                self.state = 568
                self.indent_width()


            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 571
                self.name()


            self.state = 575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__38:
                self.state = 574
                self.path()


            self.state = 577
            self.source_tree()
            self.state = 579
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__33:
                self.state = 578
                self.tab_width()


            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__34:
                self.state = 581
                self.uses_tabs()


            self.state = 584
            self.match(PBXProjParser.T__1)
            self.state = 585
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_headers_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_headers_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_header_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_header_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_headers_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_headers_build_phase"):
                listener.enterPbx_headers_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_headers_build_phase"):
                listener.exitPbx_headers_build_phase(self)




    def pbx_headers_build_phase(self):

        localctx = PBXProjParser.Pbx_headers_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_pbx_headers_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(PBXProjParser.REFERENCE)
            self.state = 588
            self.match(PBXProjParser.T__2)
            self.state = 589
            self.match(PBXProjParser.T__0)
            self.state = 590
            self.isa_pbx_header_build_phase()
            self.state = 591
            self.build_action_mask()
            self.state = 592
            self.files()
            self.state = 593
            self.run_only_for_deployment_postprocessing()
            self.state = 594
            self.match(PBXProjParser.T__1)
            self.state = 595
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_native_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_native_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_native_target(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_native_targetContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def build_phases(self):
            return self.getTypedRuleContext(PBXProjParser.Build_phasesContext,0)


        def build_rules(self):
            return self.getTypedRuleContext(PBXProjParser.Build_rulesContext,0)


        def dependencies(self):
            return self.getTypedRuleContext(PBXProjParser.DependenciesContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def product_name(self):
            return self.getTypedRuleContext(PBXProjParser.Product_nameContext,0)


        def product_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Product_referenceContext,0)


        def product_type(self):
            return self.getTypedRuleContext(PBXProjParser.Product_typeContext,0)


        def product_install_path(self):
            return self.getTypedRuleContext(PBXProjParser.Product_install_pathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_native_target

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_native_target"):
                listener.enterPbx_native_target(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_native_target"):
                listener.exitPbx_native_target(self)




    def pbx_native_target(self):

        localctx = PBXProjParser.Pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_pbx_native_target)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 597
            self.match(PBXProjParser.REFERENCE)
            self.state = 598
            self.match(PBXProjParser.T__2)
            self.state = 599
            self.match(PBXProjParser.T__0)
            self.state = 600
            self.isa_pbx_native_target()
            self.state = 601
            self.build_configuration_list()
            self.state = 602
            self.build_phases()
            self.state = 603
            self.build_rules()
            self.state = 604
            self.dependencies()
            self.state = 605
            self.name()
            self.state = 607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__36:
                self.state = 606
                self.product_install_path()


            self.state = 609
            self.product_name()
            self.state = 610
            self.product_reference()
            self.state = 611
            self.product_type()
            self.state = 612
            self.match(PBXProjParser.T__1)
            self.state = 613
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_projectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_projectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_project(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_projectContext,0)


        def attributes(self):
            return self.getTypedRuleContext(PBXProjParser.AttributesContext,0)


        def build_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configuration_listContext,0)


        def compatibility_version(self):
            return self.getTypedRuleContext(PBXProjParser.Compatibility_versionContext,0)


        def development_region(self):
            return self.getTypedRuleContext(PBXProjParser.Development_regionContext,0)


        def has_scanned_for_encodings(self):
            return self.getTypedRuleContext(PBXProjParser.Has_scanned_for_encodingsContext,0)


        def known_regions(self):
            return self.getTypedRuleContext(PBXProjParser.Known_regionsContext,0)


        def main_group(self):
            return self.getTypedRuleContext(PBXProjParser.Main_groupContext,0)


        def project_dir_path(self):
            return self.getTypedRuleContext(PBXProjParser.Project_dir_pathContext,0)


        def project_root(self):
            return self.getTypedRuleContext(PBXProjParser.Project_rootContext,0)


        def targets(self):
            return self.getTypedRuleContext(PBXProjParser.TargetsContext,0)


        def product_ref_group(self):
            return self.getTypedRuleContext(PBXProjParser.Product_ref_groupContext,0)


        def project_references(self):
            return self.getTypedRuleContext(PBXProjParser.Project_referencesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_project

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_project"):
                listener.enterPbx_project(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_project"):
                listener.exitPbx_project(self)




    def pbx_project(self):

        localctx = PBXProjParser.Pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_pbx_project)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(PBXProjParser.REFERENCE)
            self.state = 616
            self.match(PBXProjParser.T__2)
            self.state = 617
            self.match(PBXProjParser.T__0)
            self.state = 618
            self.isa_pbx_project()
            self.state = 619
            self.attributes()
            self.state = 620
            self.build_configuration_list()
            self.state = 621
            self.compatibility_version()
            self.state = 622
            self.development_region()
            self.state = 623
            self.has_scanned_for_encodings()
            self.state = 624
            self.known_regions()
            self.state = 625
            self.main_group()
            self.state = 627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__73:
                self.state = 626
                self.product_ref_group()


            self.state = 629
            self.project_dir_path()
            self.state = 631
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__75:
                self.state = 630
                self.project_references()


            self.state = 633
            self.project_root()
            self.state = 634
            self.targets()
            self.state = 635
            self.match(PBXProjParser.T__1)
            self.state = 636
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_reference_proxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_reference_proxyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_reference_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_reference_proxyContext,0)


        def file_type(self):
            return self.getTypedRuleContext(PBXProjParser.File_typeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def remote_ref(self):
            return self.getTypedRuleContext(PBXProjParser.Remote_refContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_reference_proxy

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_reference_proxy"):
                listener.enterPbx_reference_proxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_reference_proxy"):
                listener.exitPbx_reference_proxy(self)




    def pbx_reference_proxy(self):

        localctx = PBXProjParser.Pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 638
            self.match(PBXProjParser.REFERENCE)
            self.state = 639
            self.match(PBXProjParser.T__2)
            self.state = 640
            self.match(PBXProjParser.T__0)
            self.state = 641
            self.isa_pbx_reference_proxy()
            self.state = 642
            self.file_type()
            self.state = 643
            self.path()
            self.state = 644
            self.remote_ref()
            self.state = 645
            self.source_tree()
            self.state = 646
            self.match(PBXProjParser.T__1)
            self.state = 647
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_resources_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_resources_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_resources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_resources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_resources_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_resources_build_phase"):
                listener.enterPbx_resources_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_resources_build_phase"):
                listener.exitPbx_resources_build_phase(self)




    def pbx_resources_build_phase(self):

        localctx = PBXProjParser.Pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(PBXProjParser.REFERENCE)
            self.state = 650
            self.match(PBXProjParser.T__2)
            self.state = 651
            self.match(PBXProjParser.T__0)
            self.state = 652
            self.isa_pbx_resources_build_phase()
            self.state = 653
            self.build_action_mask()
            self.state = 654
            self.files()
            self.state = 655
            self.run_only_for_deployment_postprocessing()
            self.state = 656
            self.match(PBXProjParser.T__1)
            self.state = 657
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_shell_script_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_shell_script_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_shell_script_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_shell_script_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def input_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_pathsContext,0)


        def output_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_pathsContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def shell_path(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_pathContext,0)


        def shell_script(self):
            return self.getTypedRuleContext(PBXProjParser.Shell_scriptContext,0)


        def input_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Input_file_list_pathsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def output_file_list_paths(self):
            return self.getTypedRuleContext(PBXProjParser.Output_file_list_pathsContext,0)


        def show_env_vars_in_log(self):
            return self.getTypedRuleContext(PBXProjParser.Show_env_vars_in_logContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_shell_script_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_shell_script_build_phase"):
                listener.enterPbx_shell_script_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_shell_script_build_phase"):
                listener.exitPbx_shell_script_build_phase(self)




    def pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_pbx_shell_script_build_phase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 659
            self.match(PBXProjParser.REFERENCE)
            self.state = 660
            self.match(PBXProjParser.T__2)
            self.state = 661
            self.match(PBXProjParser.T__0)
            self.state = 662
            self.isa_pbx_shell_script_build_phase()
            self.state = 663
            self.build_action_mask()
            self.state = 664
            self.files()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__78:
                self.state = 665
                self.input_file_list_paths()


            self.state = 668
            self.input_paths()
            self.state = 670
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 669
                self.name()


            self.state = 673
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__80:
                self.state = 672
                self.output_file_list_paths()


            self.state = 675
            self.output_paths()
            self.state = 676
            self.run_only_for_deployment_postprocessing()
            self.state = 677
            self.shell_path()
            self.state = 678
            self.shell_script()
            self.state = 680
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__84:
                self.state = 679
                self.show_env_vars_in_log()


            self.state = 682
            self.match(PBXProjParser.T__1)
            self.state = 683
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_sources_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_sources_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_sources_build_phase(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_sources_build_phaseContext,0)


        def build_action_mask(self):
            return self.getTypedRuleContext(PBXProjParser.Build_action_maskContext,0)


        def files(self):
            return self.getTypedRuleContext(PBXProjParser.FilesContext,0)


        def run_only_for_deployment_postprocessing(self):
            return self.getTypedRuleContext(PBXProjParser.Run_only_for_deployment_postprocessingContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_sources_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_sources_build_phase"):
                listener.enterPbx_sources_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_sources_build_phase"):
                listener.exitPbx_sources_build_phase(self)




    def pbx_sources_build_phase(self):

        localctx = PBXProjParser.Pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 685
            self.match(PBXProjParser.REFERENCE)
            self.state = 686
            self.match(PBXProjParser.T__2)
            self.state = 687
            self.match(PBXProjParser.T__0)
            self.state = 688
            self.isa_pbx_sources_build_phase()
            self.state = 689
            self.build_action_mask()
            self.state = 690
            self.files()
            self.state = 691
            self.run_only_for_deployment_postprocessing()
            self.state = 692
            self.match(PBXProjParser.T__1)
            self.state = 693
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_target_dependencyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_target_dependencyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_target_dependency(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_target_dependencyContext,0)


        def target_proxy(self):
            return self.getTypedRuleContext(PBXProjParser.Target_proxyContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def target(self):
            return self.getTypedRuleContext(PBXProjParser.TargetContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_target_dependency

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_target_dependency"):
                listener.enterPbx_target_dependency(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_target_dependency"):
                listener.exitPbx_target_dependency(self)




    def pbx_target_dependency(self):

        localctx = PBXProjParser.Pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_pbx_target_dependency)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(PBXProjParser.REFERENCE)
            self.state = 696
            self.match(PBXProjParser.T__2)
            self.state = 697
            self.match(PBXProjParser.T__0)
            self.state = 698
            self.isa_pbx_target_dependency()
            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__37:
                self.state = 699
                self.name()


            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__85:
                self.state = 702
                self.target()


            self.state = 705
            self.target_proxy()
            self.state = 706
            self.match(PBXProjParser.T__1)
            self.state = 707
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Pbx_variant_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Pbx_variant_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_pbx_variant_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_pbx_variant_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_pbx_variant_group

        def enterRule(self, listener):
            if hasattr(listener, "enterPbx_variant_group"):
                listener.enterPbx_variant_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPbx_variant_group"):
                listener.exitPbx_variant_group(self)




    def pbx_variant_group(self):

        localctx = PBXProjParser.Pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_pbx_variant_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            self.match(PBXProjParser.REFERENCE)
            self.state = 710
            self.match(PBXProjParser.T__2)
            self.state = 711
            self.match(PBXProjParser.T__0)
            self.state = 712
            self.isa_pbx_variant_group()
            self.state = 713
            self.children()
            self.state = 714
            self.name()
            self.state = 716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__38:
                self.state = 715
                self.path()


            self.state = 718
            self.source_tree()
            self.state = 719
            self.match(PBXProjParser.T__1)
            self.state = 720
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_build_configurationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_build_configurationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_build_configuration(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_build_configurationContext,0)


        def build_settings(self):
            return self.getTypedRuleContext(PBXProjParser.Build_settingsContext,0)


        def name(self):
            return self.getTypedRuleContext(PBXProjParser.NameContext,0)


        def base_configuration_reference(self):
            return self.getTypedRuleContext(PBXProjParser.Base_configuration_referenceContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_build_configuration

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_build_configuration"):
                listener.enterXc_build_configuration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_build_configuration"):
                listener.exitXc_build_configuration(self)




    def xc_build_configuration(self):

        localctx = PBXProjParser.Xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_xc_build_configuration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 722
            self.match(PBXProjParser.REFERENCE)
            self.state = 723
            self.match(PBXProjParser.T__2)
            self.state = 724
            self.match(PBXProjParser.T__0)
            self.state = 725
            self.isa_xc_build_configuration()
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__89:
                self.state = 726
                self.base_configuration_reference()


            self.state = 729
            self.build_settings()
            self.state = 730
            self.name()
            self.state = 731
            self.match(PBXProjParser.T__1)
            self.state = 732
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_configuration_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_configuration_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_configuration_list(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_configuration_listContext,0)


        def build_configurations(self):
            return self.getTypedRuleContext(PBXProjParser.Build_configurationsContext,0)


        def default_configuration_is_visible(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_is_visibleContext,0)


        def default_configuration_name(self):
            return self.getTypedRuleContext(PBXProjParser.Default_configuration_nameContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_configuration_list

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_configuration_list"):
                listener.enterXc_configuration_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_configuration_list"):
                listener.exitXc_configuration_list(self)




    def xc_configuration_list(self):

        localctx = PBXProjParser.Xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_xc_configuration_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(PBXProjParser.REFERENCE)
            self.state = 735
            self.match(PBXProjParser.T__2)
            self.state = 736
            self.match(PBXProjParser.T__0)
            self.state = 737
            self.isa_xc_configuration_list()
            self.state = 738
            self.build_configurations()
            self.state = 739
            self.default_configuration_is_visible()
            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__97:
                self.state = 740
                self.default_configuration_name()


            self.state = 743
            self.match(PBXProjParser.T__1)
            self.state = 744
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_version_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_version_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def isa_xc_version_group(self):
            return self.getTypedRuleContext(PBXProjParser.Isa_xc_version_groupContext,0)


        def children(self):
            return self.getTypedRuleContext(PBXProjParser.ChildrenContext,0)


        def current_version(self):
            return self.getTypedRuleContext(PBXProjParser.Current_versionContext,0)


        def path(self):
            return self.getTypedRuleContext(PBXProjParser.PathContext,0)


        def source_tree(self):
            return self.getTypedRuleContext(PBXProjParser.Source_treeContext,0)


        def version_group_type(self):
            return self.getTypedRuleContext(PBXProjParser.Version_group_typeContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_version_group

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_version_group"):
                listener.enterXc_version_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_version_group"):
                listener.exitXc_version_group(self)




    def xc_version_group(self):

        localctx = PBXProjParser.Xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(PBXProjParser.REFERENCE)
            self.state = 747
            self.match(PBXProjParser.T__2)
            self.state = 748
            self.match(PBXProjParser.T__0)
            self.state = 749
            self.isa_xc_version_group()
            self.state = 750
            self.children()
            self.state = 751
            self.current_version()
            self.state = 752
            self.path()
            self.state = 753
            self.source_tree()
            self.state = 754
            self.version_group_type()
            self.state = 755
            self.match(PBXProjParser.T__1)
            self.state = 756
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_aggregate_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_aggregate_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_aggregate_target

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_aggregate_target"):
                listener.enterIsa_pbx_aggregate_target(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_aggregate_target"):
                listener.exitIsa_pbx_aggregate_target(self)




    def isa_pbx_aggregate_target(self):

        localctx = PBXProjParser.Isa_pbx_aggregate_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_isa_pbx_aggregate_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 758
            self.match(PBXProjParser.ISA)
            self.state = 759
            self.match(PBXProjParser.T__2)
            self.state = 760
            self.match(PBXProjParser.T__4)
            self.state = 761
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_build_fileContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_build_fileContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_build_file

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_build_file"):
                listener.enterIsa_pbx_build_file(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_build_file"):
                listener.exitIsa_pbx_build_file(self)




    def isa_pbx_build_file(self):

        localctx = PBXProjParser.Isa_pbx_build_fileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_isa_pbx_build_file)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(PBXProjParser.ISA)
            self.state = 764
            self.match(PBXProjParser.T__2)
            self.state = 765
            self.match(PBXProjParser.T__5)
            self.state = 766
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_container_item_proxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_container_item_proxyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_container_item_proxy

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_container_item_proxy"):
                listener.enterIsa_pbx_container_item_proxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_container_item_proxy"):
                listener.exitIsa_pbx_container_item_proxy(self)




    def isa_pbx_container_item_proxy(self):

        localctx = PBXProjParser.Isa_pbx_container_item_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_isa_pbx_container_item_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(PBXProjParser.ISA)
            self.state = 769
            self.match(PBXProjParser.T__2)
            self.state = 770
            self.match(PBXProjParser.T__6)
            self.state = 771
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_copy_files_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_copy_files_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_copy_files_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_copy_files_build_phase"):
                listener.enterIsa_pbx_copy_files_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_copy_files_build_phase"):
                listener.exitIsa_pbx_copy_files_build_phase(self)




    def isa_pbx_copy_files_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_copy_files_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_isa_pbx_copy_files_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self.match(PBXProjParser.ISA)
            self.state = 774
            self.match(PBXProjParser.T__2)
            self.state = 775
            self.match(PBXProjParser.T__7)
            self.state = 776
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_file_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_file_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_file_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_file_reference"):
                listener.enterIsa_pbx_file_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_file_reference"):
                listener.exitIsa_pbx_file_reference(self)




    def isa_pbx_file_reference(self):

        localctx = PBXProjParser.Isa_pbx_file_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_isa_pbx_file_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(PBXProjParser.ISA)
            self.state = 779
            self.match(PBXProjParser.T__2)
            self.state = 780
            self.match(PBXProjParser.T__8)
            self.state = 781
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_frameworks_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_frameworks_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_frameworks_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_frameworks_build_phase"):
                listener.enterIsa_pbx_frameworks_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_frameworks_build_phase"):
                listener.exitIsa_pbx_frameworks_build_phase(self)




    def isa_pbx_frameworks_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_frameworks_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_isa_pbx_frameworks_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(PBXProjParser.ISA)
            self.state = 784
            self.match(PBXProjParser.T__2)
            self.state = 785
            self.match(PBXProjParser.T__9)
            self.state = 786
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_group

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_group"):
                listener.enterIsa_pbx_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_group"):
                listener.exitIsa_pbx_group(self)




    def isa_pbx_group(self):

        localctx = PBXProjParser.Isa_pbx_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_isa_pbx_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 788
            self.match(PBXProjParser.ISA)
            self.state = 789
            self.match(PBXProjParser.T__2)
            self.state = 790
            self.match(PBXProjParser.T__10)
            self.state = 791
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_header_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_header_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_header_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_header_build_phase"):
                listener.enterIsa_pbx_header_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_header_build_phase"):
                listener.exitIsa_pbx_header_build_phase(self)




    def isa_pbx_header_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_header_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_isa_pbx_header_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(PBXProjParser.ISA)
            self.state = 794
            self.match(PBXProjParser.T__2)
            self.state = 795
            self.match(PBXProjParser.T__11)
            self.state = 796
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_native_targetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_native_targetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_native_target

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_native_target"):
                listener.enterIsa_pbx_native_target(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_native_target"):
                listener.exitIsa_pbx_native_target(self)




    def isa_pbx_native_target(self):

        localctx = PBXProjParser.Isa_pbx_native_targetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_isa_pbx_native_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(PBXProjParser.ISA)
            self.state = 799
            self.match(PBXProjParser.T__2)
            self.state = 800
            self.match(PBXProjParser.T__12)
            self.state = 801
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_projectContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_projectContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_project

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_project"):
                listener.enterIsa_pbx_project(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_project"):
                listener.exitIsa_pbx_project(self)




    def isa_pbx_project(self):

        localctx = PBXProjParser.Isa_pbx_projectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_isa_pbx_project)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(PBXProjParser.ISA)
            self.state = 804
            self.match(PBXProjParser.T__2)
            self.state = 805
            self.match(PBXProjParser.T__13)
            self.state = 806
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_reference_proxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_reference_proxyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_reference_proxy

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_reference_proxy"):
                listener.enterIsa_pbx_reference_proxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_reference_proxy"):
                listener.exitIsa_pbx_reference_proxy(self)




    def isa_pbx_reference_proxy(self):

        localctx = PBXProjParser.Isa_pbx_reference_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_isa_pbx_reference_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(PBXProjParser.ISA)
            self.state = 809
            self.match(PBXProjParser.T__2)
            self.state = 810
            self.match(PBXProjParser.T__14)
            self.state = 811
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_resources_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_resources_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_resources_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_resources_build_phase"):
                listener.enterIsa_pbx_resources_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_resources_build_phase"):
                listener.exitIsa_pbx_resources_build_phase(self)




    def isa_pbx_resources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_resources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_isa_pbx_resources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(PBXProjParser.ISA)
            self.state = 814
            self.match(PBXProjParser.T__2)
            self.state = 815
            self.match(PBXProjParser.T__15)
            self.state = 816
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_shell_script_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_shell_script_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_shell_script_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_shell_script_build_phase"):
                listener.enterIsa_pbx_shell_script_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_shell_script_build_phase"):
                listener.exitIsa_pbx_shell_script_build_phase(self)




    def isa_pbx_shell_script_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_shell_script_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_isa_pbx_shell_script_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(PBXProjParser.ISA)
            self.state = 819
            self.match(PBXProjParser.T__2)
            self.state = 820
            self.match(PBXProjParser.T__16)
            self.state = 821
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_sources_build_phaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_sources_build_phaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_sources_build_phase

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_sources_build_phase"):
                listener.enterIsa_pbx_sources_build_phase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_sources_build_phase"):
                listener.exitIsa_pbx_sources_build_phase(self)




    def isa_pbx_sources_build_phase(self):

        localctx = PBXProjParser.Isa_pbx_sources_build_phaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_isa_pbx_sources_build_phase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 823
            self.match(PBXProjParser.ISA)
            self.state = 824
            self.match(PBXProjParser.T__2)
            self.state = 825
            self.match(PBXProjParser.T__17)
            self.state = 826
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_target_dependencyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_target_dependencyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_target_dependency

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_target_dependency"):
                listener.enterIsa_pbx_target_dependency(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_target_dependency"):
                listener.exitIsa_pbx_target_dependency(self)




    def isa_pbx_target_dependency(self):

        localctx = PBXProjParser.Isa_pbx_target_dependencyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_isa_pbx_target_dependency)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(PBXProjParser.ISA)
            self.state = 829
            self.match(PBXProjParser.T__2)
            self.state = 830
            self.match(PBXProjParser.T__18)
            self.state = 831
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_pbx_variant_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_pbx_variant_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_pbx_variant_group

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_pbx_variant_group"):
                listener.enterIsa_pbx_variant_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_pbx_variant_group"):
                listener.exitIsa_pbx_variant_group(self)




    def isa_pbx_variant_group(self):

        localctx = PBXProjParser.Isa_pbx_variant_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_isa_pbx_variant_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 833
            self.match(PBXProjParser.ISA)
            self.state = 834
            self.match(PBXProjParser.T__2)
            self.state = 835
            self.match(PBXProjParser.T__19)
            self.state = 836
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_xc_build_configurationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_xc_build_configurationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_build_configuration

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_xc_build_configuration"):
                listener.enterIsa_xc_build_configuration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_xc_build_configuration"):
                listener.exitIsa_xc_build_configuration(self)




    def isa_xc_build_configuration(self):

        localctx = PBXProjParser.Isa_xc_build_configurationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_isa_xc_build_configuration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(PBXProjParser.ISA)
            self.state = 839
            self.match(PBXProjParser.T__2)
            self.state = 840
            self.match(PBXProjParser.T__20)
            self.state = 841
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_xc_configuration_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_xc_configuration_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_configuration_list

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_xc_configuration_list"):
                listener.enterIsa_xc_configuration_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_xc_configuration_list"):
                listener.exitIsa_xc_configuration_list(self)




    def isa_xc_configuration_list(self):

        localctx = PBXProjParser.Isa_xc_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_isa_xc_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 843
            self.match(PBXProjParser.ISA)
            self.state = 844
            self.match(PBXProjParser.T__2)
            self.state = 845
            self.match(PBXProjParser.T__21)
            self.state = 846
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Isa_xc_version_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Isa_xc_version_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISA(self):
            return self.getToken(PBXProjParser.ISA, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_isa_xc_version_group

        def enterRule(self, listener):
            if hasattr(listener, "enterIsa_xc_version_group"):
                listener.enterIsa_xc_version_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsa_xc_version_group"):
                listener.exitIsa_xc_version_group(self)




    def isa_xc_version_group(self):

        localctx = PBXProjParser.Isa_xc_version_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_isa_xc_version_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(PBXProjParser.ISA)
            self.state = 849
            self.match(PBXProjParser.T__2)
            self.state = 850
            self.match(PBXProjParser.T__22)
            self.state = 851
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_refContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.File_refContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_ref

        def enterRule(self, listener):
            if hasattr(listener, "enterFile_ref"):
                listener.enterFile_ref(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFile_ref"):
                listener.exitFile_ref(self)




    def file_ref(self):

        localctx = PBXProjParser.File_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_file_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(PBXProjParser.T__23)
            self.state = 854
            self.match(PBXProjParser.T__2)
            self.state = 855
            self.match(PBXProjParser.REFERENCE)
            self.state = 856
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Container_portalContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Container_portalContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_container_portal

        def enterRule(self, listener):
            if hasattr(listener, "enterContainer_portal"):
                listener.enterContainer_portal(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitContainer_portal"):
                listener.exitContainer_portal(self)




    def container_portal(self):

        localctx = PBXProjParser.Container_portalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_container_portal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(PBXProjParser.T__24)
            self.state = 859
            self.match(PBXProjParser.T__2)
            self.state = 860
            self.match(PBXProjParser.REFERENCE)
            self.state = 861
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Proxy_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Proxy_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_proxy_type

        def enterRule(self, listener):
            if hasattr(listener, "enterProxy_type"):
                listener.enterProxy_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProxy_type"):
                listener.exitProxy_type(self)




    def proxy_type(self):

        localctx = PBXProjParser.Proxy_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_proxy_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(PBXProjParser.T__25)
            self.state = 864
            self.match(PBXProjParser.T__2)
            self.state = 865
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 866
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remote_global_id_stringContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Remote_global_id_stringContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_global_id_string

        def enterRule(self, listener):
            if hasattr(listener, "enterRemote_global_id_string"):
                listener.enterRemote_global_id_string(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRemote_global_id_string"):
                listener.exitRemote_global_id_string(self)




    def remote_global_id_string(self):

        localctx = PBXProjParser.Remote_global_id_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_remote_global_id_string)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(PBXProjParser.T__26)
            self.state = 869
            self.match(PBXProjParser.T__2)
            self.state = 870
            self.match(PBXProjParser.REFERENCE)
            self.state = 871
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remote_infoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Remote_infoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_info

        def enterRule(self, listener):
            if hasattr(listener, "enterRemote_info"):
                listener.enterRemote_info(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRemote_info"):
                listener.exitRemote_info(self)




    def remote_info(self):

        localctx = PBXProjParser.Remote_infoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_remote_info)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(PBXProjParser.T__27)
            self.state = 874
            self.match(PBXProjParser.T__2)
            self.state = 875
            self.any_string()
            self.state = 876
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_encodingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.File_encodingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_file_encoding

        def enterRule(self, listener):
            if hasattr(listener, "enterFile_encoding"):
                listener.enterFile_encoding(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFile_encoding"):
                listener.exitFile_encoding(self)




    def file_encoding(self):

        localctx = PBXProjParser.File_encodingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_file_encoding)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(PBXProjParser.T__28)
            self.state = 879
            self.match(PBXProjParser.T__2)
            self.state = 880
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 881
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Explicit_file_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Explicit_file_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_explicit_file_type

        def enterRule(self, listener):
            if hasattr(listener, "enterExplicit_file_type"):
                listener.enterExplicit_file_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExplicit_file_type"):
                listener.exitExplicit_file_type(self)




    def explicit_file_type(self):

        localctx = PBXProjParser.Explicit_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_explicit_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(PBXProjParser.T__29)
            self.state = 884
            self.match(PBXProjParser.T__2)
            self.state = 885
            self.any_string()
            self.state = 886
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Last_known_file_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Last_known_file_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_last_known_file_type

        def enterRule(self, listener):
            if hasattr(listener, "enterLast_known_file_type"):
                listener.enterLast_known_file_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLast_known_file_type"):
                listener.exitLast_known_file_type(self)




    def last_known_file_type(self):

        localctx = PBXProjParser.Last_known_file_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_last_known_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(PBXProjParser.T__30)
            self.state = 889
            self.match(PBXProjParser.T__2)
            self.state = 890
            self.any_string()
            self.state = 891
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Include_in_indexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Include_in_indexContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_include_in_index

        def enterRule(self, listener):
            if hasattr(listener, "enterInclude_in_index"):
                listener.enterInclude_in_index(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInclude_in_index"):
                listener.exitInclude_in_index(self)




    def include_in_index(self):

        localctx = PBXProjParser.Include_in_indexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_include_in_index)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(PBXProjParser.T__31)
            self.state = 894
            self.match(PBXProjParser.T__2)
            self.state = 895
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 896
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Indent_widthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Indent_widthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_indent_width

        def enterRule(self, listener):
            if hasattr(listener, "enterIndent_width"):
                listener.enterIndent_width(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndent_width"):
                listener.exitIndent_width(self)




    def indent_width(self):

        localctx = PBXProjParser.Indent_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_indent_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 898
            self.match(PBXProjParser.T__32)
            self.state = 899
            self.match(PBXProjParser.T__2)
            self.state = 900
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 901
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Tab_widthContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Tab_widthContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_tab_width

        def enterRule(self, listener):
            if hasattr(listener, "enterTab_width"):
                listener.enterTab_width(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTab_width"):
                listener.exitTab_width(self)




    def tab_width(self):

        localctx = PBXProjParser.Tab_widthContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_tab_width)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(PBXProjParser.T__33)
            self.state = 904
            self.match(PBXProjParser.T__2)
            self.state = 905
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 906
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Uses_tabsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Uses_tabsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_uses_tabs

        def enterRule(self, listener):
            if hasattr(listener, "enterUses_tabs"):
                listener.enterUses_tabs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUses_tabs"):
                listener.exitUses_tabs(self)




    def uses_tabs(self):

        localctx = PBXProjParser.Uses_tabsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_uses_tabs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 908
            self.match(PBXProjParser.T__34)
            self.state = 909
            self.match(PBXProjParser.T__2)
            self.state = 910
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 911
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ChildrenContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.ChildrenContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_children

        def enterRule(self, listener):
            if hasattr(listener, "enterChildren"):
                listener.enterChildren(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChildren"):
                listener.exitChildren(self)




    def children(self):

        localctx = PBXProjParser.ChildrenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_children)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(PBXProjParser.T__35)
            self.state = 914
            self.match(PBXProjParser.T__2)
            self.state = 915
            self.reference_list()
            self.state = 916
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Product_install_pathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Product_install_pathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_install_path

        def enterRule(self, listener):
            if hasattr(listener, "enterProduct_install_path"):
                listener.enterProduct_install_path(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProduct_install_path"):
                listener.exitProduct_install_path(self)




    def product_install_path(self):

        localctx = PBXProjParser.Product_install_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_product_install_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(PBXProjParser.T__36)
            self.state = 919
            self.match(PBXProjParser.T__2)
            self.state = 920
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 921
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.NameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_name

        def enterRule(self, listener):
            if hasattr(listener, "enterName"):
                listener.enterName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitName"):
                listener.exitName(self)




    def name(self):

        localctx = PBXProjParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(PBXProjParser.T__37)
            self.state = 924
            self.match(PBXProjParser.T__2)
            self.state = 925
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 926
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.PathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_path

        def enterRule(self, listener):
            if hasattr(listener, "enterPath"):
                listener.enterPath(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPath"):
                listener.exitPath(self)




    def path(self):

        localctx = PBXProjParser.PathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(PBXProjParser.T__38)
            self.state = 929
            self.match(PBXProjParser.T__2)
            self.state = 930
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 931
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Source_treeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Source_treeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_source_tree

        def enterRule(self, listener):
            if hasattr(listener, "enterSource_tree"):
                listener.enterSource_tree(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSource_tree"):
                listener.exitSource_tree(self)




    def source_tree(self):

        localctx = PBXProjParser.Source_treeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_source_tree)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(PBXProjParser.T__39)
            self.state = 934
            self.match(PBXProjParser.T__2)
            self.state = 935
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 936
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_action_maskContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Build_action_maskContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_action_mask

        def enterRule(self, listener):
            if hasattr(listener, "enterBuild_action_mask"):
                listener.enterBuild_action_mask(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuild_action_mask"):
                listener.exitBuild_action_mask(self)




    def build_action_mask(self):

        localctx = PBXProjParser.Build_action_maskContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_build_action_mask)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(PBXProjParser.T__40)
            self.state = 939
            self.match(PBXProjParser.T__2)
            self.state = 940
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 941
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FilesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.FilesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_files

        def enterRule(self, listener):
            if hasattr(listener, "enterFiles"):
                listener.enterFiles(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFiles"):
                listener.exitFiles(self)




    def files(self):

        localctx = PBXProjParser.FilesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_files)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(PBXProjParser.T__41)
            self.state = 944
            self.match(PBXProjParser.T__2)
            self.state = 945
            self.reference_list()
            self.state = 946
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Run_only_for_deployment_postprocessingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Run_only_for_deployment_postprocessingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_run_only_for_deployment_postprocessing

        def enterRule(self, listener):
            if hasattr(listener, "enterRun_only_for_deployment_postprocessing"):
                listener.enterRun_only_for_deployment_postprocessing(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRun_only_for_deployment_postprocessing"):
                listener.exitRun_only_for_deployment_postprocessing(self)




    def run_only_for_deployment_postprocessing(self):

        localctx = PBXProjParser.Run_only_for_deployment_postprocessingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_run_only_for_deployment_postprocessing)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(PBXProjParser.T__42)
            self.state = 949
            self.match(PBXProjParser.T__2)
            self.state = 950
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 951
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Reference_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Reference_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_reference_list

        def enterRule(self, listener):
            if hasattr(listener, "enterReference_list"):
                listener.enterReference_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReference_list"):
                listener.exitReference_list(self)




    def reference_list(self):

        localctx = PBXProjParser.Reference_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_reference_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 953
            self.match(PBXProjParser.T__43)
            self.state = 958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.REFERENCE:
                self.state = 954
                self.match(PBXProjParser.REFERENCE)
                self.state = 955
                self.match(PBXProjParser.T__44)
                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 961
            self.match(PBXProjParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_string_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Any_string_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string_list

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_string_list"):
                listener.enterAny_string_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_string_list"):
                listener.exitAny_string_list(self)




    def any_string_list(self):

        localctx = PBXProjParser.Any_string_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_any_string_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(PBXProjParser.T__43)
            self.state = 969
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (PBXProjParser.QUOTED_STRING - 111)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 111)) | (1 << (PBXProjParser.VARIABLE - 111)))) != 0):
                self.state = 964
                self.any_string()
                self.state = 965
                self.match(PBXProjParser.T__44)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 972
            self.match(PBXProjParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Non_quoted_strings_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Non_quoted_strings_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self, i=None):
            if i is None:
                return self.getTokens(PBXProjParser.NON_QUOTED_STRING)
            else:
                return self.getToken(PBXProjParser.NON_QUOTED_STRING, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_non_quoted_strings_list

        def enterRule(self, listener):
            if hasattr(listener, "enterNon_quoted_strings_list"):
                listener.enterNon_quoted_strings_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNon_quoted_strings_list"):
                listener.exitNon_quoted_strings_list(self)




    def non_quoted_strings_list(self):

        localctx = PBXProjParser.Non_quoted_strings_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_non_quoted_strings_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 974
            self.match(PBXProjParser.T__43)
            self.state = 979
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.NON_QUOTED_STRING:
                self.state = 975
                self.match(PBXProjParser.NON_QUOTED_STRING)
                self.state = 976
                self.match(PBXProjParser.T__44)
                self.state = 981
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 982
            self.match(PBXProjParser.T__45)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_configuration_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Build_configuration_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configuration_list

        def enterRule(self, listener):
            if hasattr(listener, "enterBuild_configuration_list"):
                listener.enterBuild_configuration_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuild_configuration_list"):
                listener.exitBuild_configuration_list(self)




    def build_configuration_list(self):

        localctx = PBXProjParser.Build_configuration_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_build_configuration_list)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 984
            self.match(PBXProjParser.T__46)
            self.state = 985
            self.match(PBXProjParser.T__2)
            self.state = 986
            self.match(PBXProjParser.REFERENCE)
            self.state = 987
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_phasesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Build_phasesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_phases

        def enterRule(self, listener):
            if hasattr(listener, "enterBuild_phases"):
                listener.enterBuild_phases(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuild_phases"):
                listener.exitBuild_phases(self)




    def build_phases(self):

        localctx = PBXProjParser.Build_phasesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_build_phases)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 989
            self.match(PBXProjParser.T__47)
            self.state = 990
            self.match(PBXProjParser.T__2)
            self.state = 991
            self.reference_list()
            self.state = 992
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_rulesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Build_rulesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_rules

        def enterRule(self, listener):
            if hasattr(listener, "enterBuild_rules"):
                listener.enterBuild_rules(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuild_rules"):
                listener.exitBuild_rules(self)




    def build_rules(self):

        localctx = PBXProjParser.Build_rulesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_build_rules)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(PBXProjParser.T__48)
            self.state = 995
            self.match(PBXProjParser.T__2)
            self.state = 996
            self.reference_list()
            self.state = 997
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DependenciesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.DependenciesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_dependencies

        def enterRule(self, listener):
            if hasattr(listener, "enterDependencies"):
                listener.enterDependencies(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDependencies"):
                listener.exitDependencies(self)




    def dependencies(self):

        localctx = PBXProjParser.DependenciesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_dependencies)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 999
            self.match(PBXProjParser.T__49)
            self.state = 1000
            self.match(PBXProjParser.T__2)
            self.state = 1001
            self.reference_list()
            self.state = 1002
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Product_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Product_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_product_name

        def enterRule(self, listener):
            if hasattr(listener, "enterProduct_name"):
                listener.enterProduct_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProduct_name"):
                listener.exitProduct_name(self)




    def product_name(self):

        localctx = PBXProjParser.Product_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_product_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1004
            self.match(PBXProjParser.T__50)
            self.state = 1005
            self.match(PBXProjParser.T__2)
            self.state = 1006
            self.any_string()
            self.state = 1007
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Product_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Product_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterProduct_reference"):
                listener.enterProduct_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProduct_reference"):
                listener.exitProduct_reference(self)




    def product_reference(self):

        localctx = PBXProjParser.Product_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_product_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(PBXProjParser.T__51)
            self.state = 1010
            self.match(PBXProjParser.T__2)
            self.state = 1011
            self.match(PBXProjParser.REFERENCE)
            self.state = 1012
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Product_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Product_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_type

        def enterRule(self, listener):
            if hasattr(listener, "enterProduct_type"):
                listener.enterProduct_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProduct_type"):
                listener.exitProduct_type(self)




    def product_type(self):

        localctx = PBXProjParser.Product_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_product_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1014
            self.match(PBXProjParser.T__52)
            self.state = 1015
            self.match(PBXProjParser.T__2)
            self.state = 1016
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1017
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Line_endingContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Line_endingContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_line_ending

        def enterRule(self, listener):
            if hasattr(listener, "enterLine_ending"):
                listener.enterLine_ending(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLine_ending"):
                listener.exitLine_ending(self)




    def line_ending(self):

        localctx = PBXProjParser.Line_endingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_line_ending)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(PBXProjParser.T__53)
            self.state = 1020
            self.match(PBXProjParser.T__2)
            self.state = 1021
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1022
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Xc_language_specification_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Xc_language_specification_identifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_xc_language_specification_identifier

        def enterRule(self, listener):
            if hasattr(listener, "enterXc_language_specification_identifier"):
                listener.enterXc_language_specification_identifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXc_language_specification_identifier"):
                listener.exitXc_language_specification_identifier(self)




    def xc_language_specification_identifier(self):

        localctx = PBXProjParser.Xc_language_specification_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_xc_language_specification_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1024
            self.match(PBXProjParser.T__54)
            self.state = 1025
            self.match(PBXProjParser.T__2)
            self.state = 1026
            self.any_string()
            self.state = 1027
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Plist_structure_definition_identifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Plist_structure_definition_identifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_plist_structure_definition_identifier

        def enterRule(self, listener):
            if hasattr(listener, "enterPlist_structure_definition_identifier"):
                listener.enterPlist_structure_definition_identifier(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPlist_structure_definition_identifier"):
                listener.exitPlist_structure_definition_identifier(self)




    def plist_structure_definition_identifier(self):

        localctx = PBXProjParser.Plist_structure_definition_identifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_plist_structure_definition_identifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(PBXProjParser.T__55)
            self.state = 1030
            self.match(PBXProjParser.T__2)
            self.state = 1031
            self.any_string()
            self.state = 1032
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AttributesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.AttributesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def last_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_upgrade_checkContext,0)


        def class_prefix(self):
            return self.getTypedRuleContext(PBXProjParser.Class_prefixContext,0)


        def default_build_system_type_for_workspace(self):
            return self.getTypedRuleContext(PBXProjParser.Default_build_system_type_for_workspaceContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def last_swift_update_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_update_checkContext,0)


        def last_testing_upgrade_check(self):
            return self.getTypedRuleContext(PBXProjParser.Last_testing_upgrade_checkContext,0)


        def organization_name(self):
            return self.getTypedRuleContext(PBXProjParser.Organization_nameContext,0)


        def target_attributes(self):
            return self.getTypedRuleContext(PBXProjParser.Target_attributesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_attributes

        def enterRule(self, listener):
            if hasattr(listener, "enterAttributes"):
                listener.enterAttributes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAttributes"):
                listener.exitAttributes(self)




    def attributes(self):

        localctx = PBXProjParser.AttributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1034
            self.match(PBXProjParser.T__56)
            self.state = 1035
            self.match(PBXProjParser.T__2)
            self.state = 1036
            self.match(PBXProjParser.T__0)
            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__102:
                self.state = 1037
                self.class_prefix()


            self.state = 1041
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__58:
                self.state = 1040
                self.default_build_system_type_for_workspace()


            self.state = 1044
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__57:
                self.state = 1043
                self.last_swift_migration()


            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__59:
                self.state = 1046
                self.last_swift_update_check()


            self.state = 1049
            self.last_upgrade_check()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__61:
                self.state = 1050
                self.last_testing_upgrade_check()


            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__62:
                self.state = 1053
                self.organization_name()


            self.state = 1057
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__63:
                self.state = 1056
                self.target_attributes()


            self.state = 1059
            self.match(PBXProjParser.T__1)
            self.state = 1060
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Last_swift_migrationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Last_swift_migrationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_migration

        def enterRule(self, listener):
            if hasattr(listener, "enterLast_swift_migration"):
                listener.enterLast_swift_migration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLast_swift_migration"):
                listener.exitLast_swift_migration(self)




    def last_swift_migration(self):

        localctx = PBXProjParser.Last_swift_migrationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_last_swift_migration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(PBXProjParser.T__57)
            self.state = 1063
            self.match(PBXProjParser.T__2)
            self.state = 1064
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1065
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_build_system_type_for_workspaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Default_build_system_type_for_workspaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_build_system_type_for_workspace

        def enterRule(self, listener):
            if hasattr(listener, "enterDefault_build_system_type_for_workspace"):
                listener.enterDefault_build_system_type_for_workspace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefault_build_system_type_for_workspace"):
                listener.exitDefault_build_system_type_for_workspace(self)




    def default_build_system_type_for_workspace(self):

        localctx = PBXProjParser.Default_build_system_type_for_workspaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_default_build_system_type_for_workspace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1067
            self.match(PBXProjParser.T__58)
            self.state = 1068
            self.match(PBXProjParser.T__2)
            self.state = 1069
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1070
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Last_swift_update_checkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Last_swift_update_checkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_swift_update_check

        def enterRule(self, listener):
            if hasattr(listener, "enterLast_swift_update_check"):
                listener.enterLast_swift_update_check(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLast_swift_update_check"):
                listener.exitLast_swift_update_check(self)




    def last_swift_update_check(self):

        localctx = PBXProjParser.Last_swift_update_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_last_swift_update_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1072
            self.match(PBXProjParser.T__59)
            self.state = 1073
            self.match(PBXProjParser.T__2)
            self.state = 1074
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1075
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Last_upgrade_checkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Last_upgrade_checkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_upgrade_check

        def enterRule(self, listener):
            if hasattr(listener, "enterLast_upgrade_check"):
                listener.enterLast_upgrade_check(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLast_upgrade_check"):
                listener.exitLast_upgrade_check(self)




    def last_upgrade_check(self):

        localctx = PBXProjParser.Last_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_last_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1077
            self.match(PBXProjParser.T__60)
            self.state = 1078
            self.match(PBXProjParser.T__2)
            self.state = 1079
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1080
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Last_testing_upgrade_checkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Last_testing_upgrade_checkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_last_testing_upgrade_check

        def enterRule(self, listener):
            if hasattr(listener, "enterLast_testing_upgrade_check"):
                listener.enterLast_testing_upgrade_check(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLast_testing_upgrade_check"):
                listener.exitLast_testing_upgrade_check(self)




    def last_testing_upgrade_check(self):

        localctx = PBXProjParser.Last_testing_upgrade_checkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_last_testing_upgrade_check)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(PBXProjParser.T__61)
            self.state = 1083
            self.match(PBXProjParser.T__2)
            self.state = 1084
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1085
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Organization_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Organization_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_organization_name

        def enterRule(self, listener):
            if hasattr(listener, "enterOrganization_name"):
                listener.enterOrganization_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrganization_name"):
                listener.exitOrganization_name(self)




    def organization_name(self):

        localctx = PBXProjParser.Organization_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_organization_name)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1087
            self.match(PBXProjParser.T__62)
            self.state = 1088
            self.match(PBXProjParser.T__2)
            self.state = 1089
            self.any_string()
            self.state = 1090
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_attributesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Target_attributesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def target_attribute(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Target_attributeContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Target_attributeContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attributes

        def enterRule(self, listener):
            if hasattr(listener, "enterTarget_attributes"):
                listener.enterTarget_attributes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTarget_attributes"):
                listener.exitTarget_attributes(self)




    def target_attributes(self):

        localctx = PBXProjParser.Target_attributesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_target_attributes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1092
            self.match(PBXProjParser.T__63)
            self.state = 1093
            self.match(PBXProjParser.T__2)
            self.state = 1094
            self.match(PBXProjParser.T__0)
            self.state = 1098
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.REFERENCE:
                self.state = 1095
                self.target_attribute()
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1101
            self.match(PBXProjParser.T__1)
            self.state = 1102
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_attributeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Target_attributeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def created_on_tools_version(self):
            return self.getTypedRuleContext(PBXProjParser.Created_on_tools_versionContext,0)


        def test_target_id(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Test_target_idContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Test_target_idContext,i)


        def development_team(self):
            return self.getTypedRuleContext(PBXProjParser.Development_teamContext,0)


        def last_swift_migration(self):
            return self.getTypedRuleContext(PBXProjParser.Last_swift_migrationContext,0)


        def provisioning_style(self):
            return self.getTypedRuleContext(PBXProjParser.Provisioning_styleContext,0)


        def system_capabilities(self):
            return self.getTypedRuleContext(PBXProjParser.System_capabilitiesContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_target_attribute

        def enterRule(self, listener):
            if hasattr(listener, "enterTarget_attribute"):
                listener.enterTarget_attribute(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTarget_attribute"):
                listener.exitTarget_attribute(self)




    def target_attribute(self):

        localctx = PBXProjParser.Target_attributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_target_attribute)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(PBXProjParser.REFERENCE)
            self.state = 1105
            self.match(PBXProjParser.T__2)
            self.state = 1106
            self.match(PBXProjParser.T__0)
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__64:
                self.state = 1107
                self.created_on_tools_version()


            self.state = 1111
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 1110
                self.test_target_id()


            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__66:
                self.state = 1113
                self.development_team()


            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__57:
                self.state = 1116
                self.last_swift_migration()


            self.state = 1120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__67:
                self.state = 1119
                self.provisioning_style()


            self.state = 1123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__99:
                self.state = 1122
                self.system_capabilities()


            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PBXProjParser.T__65:
                self.state = 1125
                self.test_target_id()


            self.state = 1128
            self.match(PBXProjParser.T__1)
            self.state = 1129
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Created_on_tools_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Created_on_tools_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_created_on_tools_version

        def enterRule(self, listener):
            if hasattr(listener, "enterCreated_on_tools_version"):
                listener.enterCreated_on_tools_version(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreated_on_tools_version"):
                listener.exitCreated_on_tools_version(self)




    def created_on_tools_version(self):

        localctx = PBXProjParser.Created_on_tools_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_created_on_tools_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(PBXProjParser.T__64)
            self.state = 1132
            self.match(PBXProjParser.T__2)
            self.state = 1133
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1134
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Test_target_idContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Test_target_idContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_test_target_id

        def enterRule(self, listener):
            if hasattr(listener, "enterTest_target_id"):
                listener.enterTest_target_id(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTest_target_id"):
                listener.exitTest_target_id(self)




    def test_target_id(self):

        localctx = PBXProjParser.Test_target_idContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_test_target_id)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1136
            self.match(PBXProjParser.T__65)
            self.state = 1137
            self.match(PBXProjParser.T__2)
            self.state = 1138
            self.match(PBXProjParser.REFERENCE)
            self.state = 1139
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Development_teamContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Development_teamContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_team

        def enterRule(self, listener):
            if hasattr(listener, "enterDevelopment_team"):
                listener.enterDevelopment_team(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDevelopment_team"):
                listener.exitDevelopment_team(self)




    def development_team(self):

        localctx = PBXProjParser.Development_teamContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_development_team)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.match(PBXProjParser.T__66)
            self.state = 1142
            self.match(PBXProjParser.T__2)
            self.state = 1143
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1144
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Provisioning_styleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Provisioning_styleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_provisioning_style

        def enterRule(self, listener):
            if hasattr(listener, "enterProvisioning_style"):
                listener.enterProvisioning_style(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProvisioning_style"):
                listener.exitProvisioning_style(self)




    def provisioning_style(self):

        localctx = PBXProjParser.Provisioning_styleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_provisioning_style)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(PBXProjParser.T__67)
            self.state = 1147
            self.match(PBXProjParser.T__2)
            self.state = 1148
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1149
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Compatibility_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Compatibility_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_compatibility_version

        def enterRule(self, listener):
            if hasattr(listener, "enterCompatibility_version"):
                listener.enterCompatibility_version(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompatibility_version"):
                listener.exitCompatibility_version(self)




    def compatibility_version(self):

        localctx = PBXProjParser.Compatibility_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_compatibility_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(PBXProjParser.T__68)
            self.state = 1152
            self.match(PBXProjParser.T__2)
            self.state = 1153
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1154
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Development_regionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Development_regionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_development_region

        def enterRule(self, listener):
            if hasattr(listener, "enterDevelopment_region"):
                listener.enterDevelopment_region(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDevelopment_region"):
                listener.exitDevelopment_region(self)




    def development_region(self):

        localctx = PBXProjParser.Development_regionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_development_region)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(PBXProjParser.T__69)
            self.state = 1157
            self.match(PBXProjParser.T__2)
            self.state = 1158
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1159
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Has_scanned_for_encodingsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Has_scanned_for_encodingsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_has_scanned_for_encodings

        def enterRule(self, listener):
            if hasattr(listener, "enterHas_scanned_for_encodings"):
                listener.enterHas_scanned_for_encodings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHas_scanned_for_encodings"):
                listener.exitHas_scanned_for_encodings(self)




    def has_scanned_for_encodings(self):

        localctx = PBXProjParser.Has_scanned_for_encodingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_has_scanned_for_encodings)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(PBXProjParser.T__70)
            self.state = 1162
            self.match(PBXProjParser.T__2)
            self.state = 1163
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1164
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Known_regionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Known_regionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_known_regions

        def enterRule(self, listener):
            if hasattr(listener, "enterKnown_regions"):
                listener.enterKnown_regions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKnown_regions"):
                listener.exitKnown_regions(self)




    def known_regions(self):

        localctx = PBXProjParser.Known_regionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_known_regions)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(PBXProjParser.T__71)
            self.state = 1167
            self.match(PBXProjParser.T__2)
            self.state = 1168
            self.any_string_list()
            self.state = 1169
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Main_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Main_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_main_group

        def enterRule(self, listener):
            if hasattr(listener, "enterMain_group"):
                listener.enterMain_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMain_group"):
                listener.exitMain_group(self)




    def main_group(self):

        localctx = PBXProjParser.Main_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_main_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            self.match(PBXProjParser.T__72)
            self.state = 1172
            self.match(PBXProjParser.T__2)
            self.state = 1173
            self.match(PBXProjParser.REFERENCE)
            self.state = 1174
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Product_ref_groupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Product_ref_groupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_product_ref_group

        def enterRule(self, listener):
            if hasattr(listener, "enterProduct_ref_group"):
                listener.enterProduct_ref_group(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProduct_ref_group"):
                listener.exitProduct_ref_group(self)




    def product_ref_group(self):

        localctx = PBXProjParser.Product_ref_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_product_ref_group)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1176
            self.match(PBXProjParser.T__73)
            self.state = 1177
            self.match(PBXProjParser.T__2)
            self.state = 1178
            self.match(PBXProjParser.REFERENCE)
            self.state = 1179
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Project_dir_pathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Project_dir_pathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_dir_path

        def enterRule(self, listener):
            if hasattr(listener, "enterProject_dir_path"):
                listener.enterProject_dir_path(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProject_dir_path"):
                listener.exitProject_dir_path(self)




    def project_dir_path(self):

        localctx = PBXProjParser.Project_dir_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_project_dir_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(PBXProjParser.T__74)
            self.state = 1182
            self.match(PBXProjParser.T__2)
            self.state = 1183
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1184
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Project_referencesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Project_referencesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def project_references_list(self):
            return self.getTypedRuleContext(PBXProjParser.Project_references_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references

        def enterRule(self, listener):
            if hasattr(listener, "enterProject_references"):
                listener.enterProject_references(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProject_references"):
                listener.exitProject_references(self)




    def project_references(self):

        localctx = PBXProjParser.Project_referencesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_project_references)
        try:
            self.state = 1198
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,77,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1186
                self.match(PBXProjParser.T__75)
                self.state = 1187
                self.match(PBXProjParser.T__2)
                self.state = 1188
                self.any_string()
                self.state = 1189
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1191
                self.match(PBXProjParser.T__75)
                self.state = 1192
                self.match(PBXProjParser.T__2)
                self.state = 1193
                self.match(PBXProjParser.T__43)
                self.state = 1194
                self.project_references_list()
                self.state = 1195
                self.match(PBXProjParser.T__45)
                self.state = 1196
                self.match(PBXProjParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Project_rootContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Project_rootContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_root

        def enterRule(self, listener):
            if hasattr(listener, "enterProject_root"):
                listener.enterProject_root(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProject_root"):
                listener.exitProject_root(self)




    def project_root(self):

        localctx = PBXProjParser.Project_rootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_project_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self.match(PBXProjParser.T__76)
            self.state = 1201
            self.match(PBXProjParser.T__2)
            self.state = 1202
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1203
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TargetsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.TargetsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_targets

        def enterRule(self, listener):
            if hasattr(listener, "enterTargets"):
                listener.enterTargets(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTargets"):
                listener.exitTargets(self)




    def targets(self):

        localctx = PBXProjParser.TargetsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_targets)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(PBXProjParser.T__77)
            self.state = 1206
            self.match(PBXProjParser.T__2)
            self.state = 1207
            self.reference_list()
            self.state = 1208
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Input_file_list_pathsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Input_file_list_pathsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_file_list_paths

        def enterRule(self, listener):
            if hasattr(listener, "enterInput_file_list_paths"):
                listener.enterInput_file_list_paths(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInput_file_list_paths"):
                listener.exitInput_file_list_paths(self)




    def input_file_list_paths(self):

        localctx = PBXProjParser.Input_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_input_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210
            self.match(PBXProjParser.T__78)
            self.state = 1211
            self.match(PBXProjParser.T__2)
            self.state = 1212
            self.any_string_list()
            self.state = 1213
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Input_pathsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Input_pathsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_input_paths

        def enterRule(self, listener):
            if hasattr(listener, "enterInput_paths"):
                listener.enterInput_paths(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInput_paths"):
                listener.exitInput_paths(self)




    def input_paths(self):

        localctx = PBXProjParser.Input_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_input_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1215
            self.match(PBXProjParser.T__79)
            self.state = 1216
            self.match(PBXProjParser.T__2)
            self.state = 1217
            self.any_string_list()
            self.state = 1218
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_file_list_pathsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Output_file_list_pathsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_file_list_paths

        def enterRule(self, listener):
            if hasattr(listener, "enterOutput_file_list_paths"):
                listener.enterOutput_file_list_paths(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOutput_file_list_paths"):
                listener.exitOutput_file_list_paths(self)




    def output_file_list_paths(self):

        localctx = PBXProjParser.Output_file_list_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_output_file_list_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1220
            self.match(PBXProjParser.T__80)
            self.state = 1221
            self.match(PBXProjParser.T__2)
            self.state = 1222
            self.any_string_list()
            self.state = 1223
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Output_pathsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Output_pathsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string_list(self):
            return self.getTypedRuleContext(PBXProjParser.Any_string_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_output_paths

        def enterRule(self, listener):
            if hasattr(listener, "enterOutput_paths"):
                listener.enterOutput_paths(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOutput_paths"):
                listener.exitOutput_paths(self)




    def output_paths(self):

        localctx = PBXProjParser.Output_pathsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_output_paths)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.match(PBXProjParser.T__81)
            self.state = 1226
            self.match(PBXProjParser.T__2)
            self.state = 1227
            self.any_string_list()
            self.state = 1228
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shell_pathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Shell_pathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_path

        def enterRule(self, listener):
            if hasattr(listener, "enterShell_path"):
                listener.enterShell_path(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShell_path"):
                listener.exitShell_path(self)




    def shell_path(self):

        localctx = PBXProjParser.Shell_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_shell_path)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(PBXProjParser.T__82)
            self.state = 1231
            self.match(PBXProjParser.T__2)
            self.state = 1232
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1233
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Shell_scriptContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Shell_scriptContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_shell_script

        def enterRule(self, listener):
            if hasattr(listener, "enterShell_script"):
                listener.enterShell_script(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShell_script"):
                listener.exitShell_script(self)




    def shell_script(self):

        localctx = PBXProjParser.Shell_scriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_shell_script)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1235
            self.match(PBXProjParser.T__83)
            self.state = 1236
            self.match(PBXProjParser.T__2)
            self.state = 1237
            self.match(PBXProjParser.QUOTED_STRING)
            self.state = 1238
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Show_env_vars_in_logContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Show_env_vars_in_logContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_show_env_vars_in_log

        def enterRule(self, listener):
            if hasattr(listener, "enterShow_env_vars_in_log"):
                listener.enterShow_env_vars_in_log(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShow_env_vars_in_log"):
                listener.exitShow_env_vars_in_log(self)




    def show_env_vars_in_log(self):

        localctx = PBXProjParser.Show_env_vars_in_logContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_show_env_vars_in_log)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.match(PBXProjParser.T__84)
            self.state = 1241
            self.match(PBXProjParser.T__2)
            self.state = 1242
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1243
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TargetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.TargetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target

        def enterRule(self, listener):
            if hasattr(listener, "enterTarget"):
                listener.enterTarget(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTarget"):
                listener.exitTarget(self)




    def target(self):

        localctx = PBXProjParser.TargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_target)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1245
            self.match(PBXProjParser.T__85)
            self.state = 1246
            self.match(PBXProjParser.T__2)
            self.state = 1247
            self.match(PBXProjParser.REFERENCE)
            self.state = 1248
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Target_proxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Target_proxyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_target_proxy

        def enterRule(self, listener):
            if hasattr(listener, "enterTarget_proxy"):
                listener.enterTarget_proxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTarget_proxy"):
                listener.exitTarget_proxy(self)




    def target_proxy(self):

        localctx = PBXProjParser.Target_proxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_target_proxy)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self.match(PBXProjParser.T__86)
            self.state = 1251
            self.match(PBXProjParser.T__2)
            self.state = 1252
            self.match(PBXProjParser.REFERENCE)
            self.state = 1253
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class File_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.File_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_file_type

        def enterRule(self, listener):
            if hasattr(listener, "enterFile_type"):
                listener.enterFile_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFile_type"):
                listener.exitFile_type(self)




    def file_type(self):

        localctx = PBXProjParser.File_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_file_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(PBXProjParser.T__87)
            self.state = 1256
            self.match(PBXProjParser.T__2)
            self.state = 1257
            self.any_string()
            self.state = 1258
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Remote_refContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Remote_refContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_remote_ref

        def enterRule(self, listener):
            if hasattr(listener, "enterRemote_ref"):
                listener.enterRemote_ref(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRemote_ref"):
                listener.exitRemote_ref(self)




    def remote_ref(self):

        localctx = PBXProjParser.Remote_refContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_remote_ref)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(PBXProjParser.T__88)
            self.state = 1261
            self.match(PBXProjParser.T__2)
            self.state = 1262
            self.match(PBXProjParser.REFERENCE)
            self.state = 1263
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Base_configuration_referenceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Base_configuration_referenceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_base_configuration_reference

        def enterRule(self, listener):
            if hasattr(listener, "enterBase_configuration_reference"):
                listener.enterBase_configuration_reference(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBase_configuration_reference"):
                listener.exitBase_configuration_reference(self)




    def base_configuration_reference(self):

        localctx = PBXProjParser.Base_configuration_referenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_base_configuration_reference)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1265
            self.match(PBXProjParser.T__89)
            self.state = 1266
            self.match(PBXProjParser.T__2)
            self.state = 1267
            self.match(PBXProjParser.REFERENCE)
            self.state = 1268
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_settingsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Build_settingsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_settings

        def enterRule(self, listener):
            if hasattr(listener, "enterBuild_settings"):
                listener.enterBuild_settings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuild_settings"):
                listener.exitBuild_settings(self)




    def build_settings(self):

        localctx = PBXProjParser.Build_settingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_build_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(PBXProjParser.T__90)
            self.state = 1271
            self.match(PBXProjParser.T__2)
            self.state = 1272
            self.match(PBXProjParser.T__0)
            self.state = 1276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (PBXProjParser.QUOTED_STRING - 111)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 111)) | (1 << (PBXProjParser.VARIABLE - 111)))) != 0):
                self.state = 1273
                self.key_value()
                self.state = 1278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1279
            self.match(PBXProjParser.T__1)
            self.state = 1280
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dst_pathContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Dst_pathContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_path

        def enterRule(self, listener):
            if hasattr(listener, "enterDst_path"):
                listener.enterDst_path(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDst_path"):
                listener.exitDst_path(self)




    def dst_path(self):

        localctx = PBXProjParser.Dst_pathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_dst_path)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1282
            self.match(PBXProjParser.T__91)
            self.state = 1283
            self.match(PBXProjParser.T__2)
            self.state = 1284
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1285
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Dst_subfolder_specContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Dst_subfolder_specContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_dst_subfolder_spec

        def enterRule(self, listener):
            if hasattr(listener, "enterDst_subfolder_spec"):
                listener.enterDst_subfolder_spec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDst_subfolder_spec"):
                listener.exitDst_subfolder_spec(self)




    def dst_subfolder_spec(self):

        localctx = PBXProjParser.Dst_subfolder_specContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_dst_subfolder_spec)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            self.match(PBXProjParser.T__92)
            self.state = 1288
            self.match(PBXProjParser.T__2)
            self.state = 1289
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1290
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Project_references_listContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Project_references_listContext, self).__init__(parent, invokingState)
            self.parser = parser

        def project_references_list_element(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Project_references_list_elementContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Project_references_list_elementContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list

        def enterRule(self, listener):
            if hasattr(listener, "enterProject_references_list"):
                listener.enterProject_references_list(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProject_references_list"):
                listener.exitProject_references_list(self)




    def project_references_list(self):

        localctx = PBXProjParser.Project_references_listContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_project_references_list)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PBXProjParser.T__0:
                self.state = 1292
                self.project_references_list_element()
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Project_references_list_elementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Project_references_list_elementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self, i=None):
            if i is None:
                return self.getTokens(PBXProjParser.REFERENCE)
            else:
                return self.getToken(PBXProjParser.REFERENCE, i)

        def getRuleIndex(self):
            return PBXProjParser.RULE_project_references_list_element

        def enterRule(self, listener):
            if hasattr(listener, "enterProject_references_list_element"):
                listener.enterProject_references_list_element(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProject_references_list_element"):
                listener.exitProject_references_list_element(self)




    def project_references_list_element(self):

        localctx = PBXProjParser.Project_references_list_elementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_project_references_list_element)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            self.match(PBXProjParser.T__0)
            self.state = 1299
            self.match(PBXProjParser.T__93)
            self.state = 1300
            self.match(PBXProjParser.T__2)
            self.state = 1301
            self.match(PBXProjParser.REFERENCE)
            self.state = 1302
            self.match(PBXProjParser.T__3)
            self.state = 1303
            self.match(PBXProjParser.T__94)
            self.state = 1304
            self.match(PBXProjParser.T__2)
            self.state = 1305
            self.match(PBXProjParser.REFERENCE)
            self.state = 1306
            self.match(PBXProjParser.T__3)
            self.state = 1307
            self.match(PBXProjParser.T__1)
            self.state = 1308
            self.match(PBXProjParser.T__44)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Key_valueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Key_valueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Any_stringContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Any_stringContext,i)


        def key_value(self):
            return self.getTypedRuleContext(PBXProjParser.Key_valueContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_key_value

        def enterRule(self, listener):
            if hasattr(listener, "enterKey_value"):
                listener.enterKey_value(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKey_value"):
                listener.exitKey_value(self)




    def key_value(self):

        localctx = PBXProjParser.Key_valueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_key_value)
        self._la = 0 # Token type
        try:
            self.state = 1336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1310
                self.any_string()
                self.state = 1311
                self.match(PBXProjParser.T__2)
                self.state = 1312
                self.any_string()
                self.state = 1313
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1315
                self.any_string()
                self.state = 1316
                self.match(PBXProjParser.T__2)
                self.state = 1317
                self.match(PBXProjParser.T__0)
                self.state = 1318
                self.key_value()
                self.state = 1319
                self.match(PBXProjParser.T__1)
                self.state = 1320
                self.match(PBXProjParser.T__3)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322
                self.any_string()
                self.state = 1323
                self.match(PBXProjParser.T__2)
                self.state = 1324
                self.match(PBXProjParser.T__43)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (PBXProjParser.QUOTED_STRING - 111)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 111)) | (1 << (PBXProjParser.VARIABLE - 111)))) != 0):
                    self.state = 1325
                    self.any_string()
                    self.state = 1326
                    self.match(PBXProjParser.T__44)
                    self.state = 1332
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1333
                self.match(PBXProjParser.T__45)
                self.state = 1334
                self.match(PBXProjParser.T__3)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Build_configurationsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Build_configurationsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def reference_list(self):
            return self.getTypedRuleContext(PBXProjParser.Reference_listContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_build_configurations

        def enterRule(self, listener):
            if hasattr(listener, "enterBuild_configurations"):
                listener.enterBuild_configurations(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBuild_configurations"):
                listener.exitBuild_configurations(self)




    def build_configurations(self):

        localctx = PBXProjParser.Build_configurationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_build_configurations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(PBXProjParser.T__95)
            self.state = 1339
            self.match(PBXProjParser.T__2)
            self.state = 1340
            self.reference_list()
            self.state = 1341
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_configuration_is_visibleContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Default_configuration_is_visibleContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_is_visible

        def enterRule(self, listener):
            if hasattr(listener, "enterDefault_configuration_is_visible"):
                listener.enterDefault_configuration_is_visible(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefault_configuration_is_visible"):
                listener.exitDefault_configuration_is_visible(self)




    def default_configuration_is_visible(self):

        localctx = PBXProjParser.Default_configuration_is_visibleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_default_configuration_is_visible)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.match(PBXProjParser.T__96)
            self.state = 1344
            self.match(PBXProjParser.T__2)
            self.state = 1345
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1346
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Default_configuration_nameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Default_configuration_nameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_default_configuration_name

        def enterRule(self, listener):
            if hasattr(listener, "enterDefault_configuration_name"):
                listener.enterDefault_configuration_name(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefault_configuration_name"):
                listener.exitDefault_configuration_name(self)




    def default_configuration_name(self):

        localctx = PBXProjParser.Default_configuration_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_default_configuration_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1348
            self.match(PBXProjParser.T__97)
            self.state = 1349
            self.match(PBXProjParser.T__2)
            self.state = 1350
            _la = self._input.LA(1)
            if not(_la==PBXProjParser.QUOTED_STRING or _la==PBXProjParser.NON_QUOTED_STRING):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1351
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SettingsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.SettingsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_settings

        def enterRule(self, listener):
            if hasattr(listener, "enterSettings"):
                listener.enterSettings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSettings"):
                listener.exitSettings(self)




    def settings(self):

        localctx = PBXProjParser.SettingsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_settings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            self.match(PBXProjParser.T__98)
            self.state = 1354
            self.match(PBXProjParser.T__2)
            self.state = 1355
            self.match(PBXProjParser.T__0)
            self.state = 1359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (PBXProjParser.QUOTED_STRING - 111)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 111)) | (1 << (PBXProjParser.VARIABLE - 111)))) != 0):
                self.state = 1356
                self.key_value()
                self.state = 1361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1362
            self.match(PBXProjParser.T__1)
            self.state = 1363
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class System_capabilitiesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.System_capabilitiesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def key_value(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(PBXProjParser.Key_valueContext)
            else:
                return self.getTypedRuleContext(PBXProjParser.Key_valueContext,i)


        def getRuleIndex(self):
            return PBXProjParser.RULE_system_capabilities

        def enterRule(self, listener):
            if hasattr(listener, "enterSystem_capabilities"):
                listener.enterSystem_capabilities(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSystem_capabilities"):
                listener.exitSystem_capabilities(self)




    def system_capabilities(self):

        localctx = PBXProjParser.System_capabilitiesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_system_capabilities)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(PBXProjParser.T__99)
            self.state = 1366
            self.match(PBXProjParser.T__2)
            self.state = 1367
            self.match(PBXProjParser.T__0)
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (PBXProjParser.QUOTED_STRING - 111)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 111)) | (1 << (PBXProjParser.VARIABLE - 111)))) != 0):
                self.state = 1368
                self.key_value()
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1374
            self.match(PBXProjParser.T__1)
            self.state = 1375
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Current_versionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Current_versionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REFERENCE(self):
            return self.getToken(PBXProjParser.REFERENCE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_current_version

        def enterRule(self, listener):
            if hasattr(listener, "enterCurrent_version"):
                listener.enterCurrent_version(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCurrent_version"):
                listener.exitCurrent_version(self)




    def current_version(self):

        localctx = PBXProjParser.Current_versionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_current_version)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1377
            self.match(PBXProjParser.T__100)
            self.state = 1378
            self.match(PBXProjParser.T__2)
            self.state = 1379
            self.match(PBXProjParser.REFERENCE)
            self.state = 1380
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Version_group_typeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Version_group_typeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_version_group_type

        def enterRule(self, listener):
            if hasattr(listener, "enterVersion_group_type"):
                listener.enterVersion_group_type(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVersion_group_type"):
                listener.exitVersion_group_type(self)




    def version_group_type(self):

        localctx = PBXProjParser.Version_group_typeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_version_group_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1382
            self.match(PBXProjParser.T__101)
            self.state = 1383
            self.match(PBXProjParser.T__2)
            self.state = 1384
            self.match(PBXProjParser.NON_QUOTED_STRING)
            self.state = 1385
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Class_prefixContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Class_prefixContext, self).__init__(parent, invokingState)
            self.parser = parser

        def any_string(self):
            return self.getTypedRuleContext(PBXProjParser.Any_stringContext,0)


        def getRuleIndex(self):
            return PBXProjParser.RULE_class_prefix

        def enterRule(self, listener):
            if hasattr(listener, "enterClass_prefix"):
                listener.enterClass_prefix(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitClass_prefix"):
                listener.exitClass_prefix(self)




    def class_prefix(self):

        localctx = PBXProjParser.Class_prefixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_class_prefix)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(PBXProjParser.T__102)
            self.state = 1388
            self.match(PBXProjParser.T__2)
            self.state = 1389
            self.any_string()
            self.state = 1390
            self.match(PBXProjParser.T__3)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class Any_stringContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(PBXProjParser.Any_stringContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NON_QUOTED_STRING(self):
            return self.getToken(PBXProjParser.NON_QUOTED_STRING, 0)

        def QUOTED_STRING(self):
            return self.getToken(PBXProjParser.QUOTED_STRING, 0)

        def VARIABLE(self):
            return self.getToken(PBXProjParser.VARIABLE, 0)

        def getRuleIndex(self):
            return PBXProjParser.RULE_any_string

        def enterRule(self, listener):
            if hasattr(listener, "enterAny_string"):
                listener.enterAny_string(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAny_string"):
                listener.exitAny_string(self)




    def any_string(self):

        localctx = PBXProjParser.Any_stringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_any_string)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            _la = self._input.LA(1)
            if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (PBXProjParser.QUOTED_STRING - 111)) | (1 << (PBXProjParser.NON_QUOTED_STRING - 111)) | (1 << (PBXProjParser.VARIABLE - 111)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





